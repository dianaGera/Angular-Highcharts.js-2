"use strict";
(self["webpackChunkhighcharts"] = self["webpackChunkhighcharts"] || []).push([["main"],{

/***/ 5041:
/*!**********************************!*\
  !*** ./src/app/app.component.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AppComponent": () => (/* binding */ AppComponent)
/* harmony export */ });
/* harmony import */ var highcharts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! highcharts */ 5972);
/* harmony import */ var highcharts__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(highcharts__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var highcharts_highcharts_more__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! highcharts/highcharts-more */ 9249);
/* harmony import */ var highcharts_highcharts_more__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(highcharts_highcharts_more__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var highcharts_modules_solid_gauge__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! highcharts/modules/solid-gauge */ 4895);
/* harmony import */ var highcharts_modules_solid_gauge__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(highcharts_modules_solid_gauge__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ 3184);
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/router */ 2816);





const _c0 = function () { return ["/pdf"]; };
const _c1 = function () { return ["/cohort-rep"]; };
const _c2 = function () { return ["/java-app"]; };
const _c3 = function () { return ["/new-java-app"]; };
const _c4 = function () { return ["/other"]; };
highcharts_highcharts_more__WEBPACK_IMPORTED_MODULE_1___default()(highcharts__WEBPACK_IMPORTED_MODULE_0__);
highcharts_modules_solid_gauge__WEBPACK_IMPORTED_MODULE_2___default()(highcharts__WEBPACK_IMPORTED_MODULE_0__);
class AppComponent {
    constructor() {
        this.title = 'sdmkcsld';
    }
}
AppComponent.ɵfac = function AppComponent_Factory(t) { return new (t || AppComponent)(); };
AppComponent.ɵcmp = /*@__PURE__*/ _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdefineComponent"]({ type: AppComponent, selectors: [["app-root"]], decls: 37, vars: 10, consts: [[1, "relative", "bg-white"], [1, "max-w-7xl", "mx-auto", "px-4", "sm:px-6"], [1, "flex", "justify-between", "items-center", "border-b-2", "border-gray-100", "py-6", "md:justify-start", "md:space-x-10"], [1, "flex", "justify-start", "lg:w-0", "lg:flex-1"], ["href", "#"], [1, "sr-only"], ["src", "https://tailwindui.com/img/logos/workflow-mark-indigo-600.svg", "alt", "", 1, "h-8", "w-auto", "sm:h-10"], [1, "-mr-2", "-my-2", "md:hidden"], ["type", "button", "aria-expanded", "false", 1, "bg-white", "rounded-md", "p-2", "inline-flex", "items-center", "justify-center", "text-gray-400", "hover:text-gray-500", "hover:bg-gray-100", "focus:outline-none", "focus:ring-2", "focus:ring-inset", "focus:ring-indigo-500"], ["xmlns", "http://www.w3.org/2000/svg", "fill", "none", "viewBox", "0 0 24 24", "stroke-width", "2", "stroke", "currentColor", "aria-hidden", "true", 1, "h-6", "w-6"], ["stroke-linecap", "round", "stroke-linejoin", "round", "d", "M4 6h16M4 12h16M4 18h16"], [1, "hidden", "md:flex", "space-x-10"], [1, "relative"], ["type", "button", "aria-expanded", "false", 1, "text-gray-500", "group", "bg-white", "rounded-md", "inline-flex", "items-center", "text-base", "font-medium", "hover:text-gray-900", "focus:outline-none", "focus:ring-2", "focus:ring-offset-2", "focus:ring-indigo-500"], ["routerLinkActive", "router-link-active", 3, "routerLink"], ["routerLinkActive", "router-link-active", 1, "text-base", "font-medium", "text-gray-500", "hover:text-gray-900", 3, "routerLink"], [1, "hidden", "md:flex", "items-center", "justify-end", "md:flex-1", "lg:w-0"], ["href", "#", 1, "whitespace-nowrap", "text-base", "font-medium", "text-gray-500", "hover:text-gray-900"], ["href", "#", 1, "ml-8", "whitespace-nowrap", "inline-flex", "items-center", "justify-center", "px-4", "py-2", "border", "border-transparent", "rounded-md", "shadow-sm", "text-base", "font-medium", "text-white", "bg-indigo-600", "hover:bg-indigo-700"]], template: function AppComponent_Template(rf, ctx) { if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](0, "div", 0)(1, "div", 1)(2, "div", 2)(3, "div", 3)(4, "a", 4)(5, "span", 5);
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](6, "Workflow");
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelement"](7, "img", 6);
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]()();
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](8, "div", 7)(9, "button", 8)(10, "span", 5);
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](11, "Open menu");
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnamespaceSVG"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](12, "svg", 9);
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelement"](13, "path", 10);
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]()()();
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵnamespaceHTML"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](14, "nav", 11)(15, "div", 12)(16, "button", 13)(17, "span")(18, "a", 14);
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](19, " PDF chart");
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]()()()();
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](20, "a", 15);
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](21, " Cohort Reort");
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](22, "a", 15);
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](23, "Java App");
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](24, "a", 15);
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](25, "New Java App");
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](26, "div", 12)(27, "button", 13)(28, "span")(29, "a", 14);
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](30, " Other ");
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]()()()()();
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](31, "div", 16)(32, "a", 17);
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](33, " Sign in ");
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementStart"](34, "a", 18);
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵtext"](35, " Sign up ");
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelementEnd"]()()()()();
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵelement"](36, "router-outlet");
    } if (rf & 2) {
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](18);
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("routerLink", _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵpureFunction0"](5, _c0));
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](2);
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("routerLink", _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵpureFunction0"](6, _c1));
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](2);
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("routerLink", _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵpureFunction0"](7, _c2));
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](2);
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("routerLink", _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵpureFunction0"](8, _c3));
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵadvance"](5);
        _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵproperty"]("routerLink", _angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵpureFunction0"](9, _c4));
    } }, directives: [_angular_router__WEBPACK_IMPORTED_MODULE_4__.RouterLinkWithHref, _angular_router__WEBPACK_IMPORTED_MODULE_4__.RouterLinkActive, _angular_router__WEBPACK_IMPORTED_MODULE_4__.RouterOutlet], styles: ["\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJhcHAuY29tcG9uZW50LnNhc3MifQ== */"] });


/***/ }),

/***/ 6747:
/*!*******************************!*\
  !*** ./src/app/app.module.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AppModule": () => (/* binding */ AppModule)
/* harmony export */ });
/* harmony import */ var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/platform-browser */ 318);
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @angular/forms */ 587);
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @angular/common/http */ 8784);
/* harmony import */ var _fortawesome_angular_fontawesome__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @fortawesome/angular-fontawesome */ 9397);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/common */ 6362);
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @angular/router */ 2816);
/* harmony import */ var _app_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./app.component */ 5041);
/* harmony import */ var _components_charts_charts_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./components/charts/charts.component */ 655);
/* harmony import */ var _components_personal_report_personal_report_component__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./components/personal-report/personal-report.component */ 8737);
/* harmony import */ var _components_pdf_pdf_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./components/pdf/pdf.component */ 3405);
/* harmony import */ var _components_report_from_java_report_from_java_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./components/report-from-java/report-from-java.component */ 3959);
/* harmony import */ var _components_new_java_new_java_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./components/new-java/new-java.component */ 8814);
/* harmony import */ var angular_highcharts__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! angular-highcharts */ 4072);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/core */ 3184);















const appRoutes = [
    { path: "pdf", component: _components_pdf_pdf_component__WEBPACK_IMPORTED_MODULE_3__.PdfComponent },
    { path: "cohort-rep", component: _components_personal_report_personal_report_component__WEBPACK_IMPORTED_MODULE_2__.PersonalReportComponent },
    { path: "java-app", component: _components_report_from_java_report_from_java_component__WEBPACK_IMPORTED_MODULE_4__.ReportFromJavaComponent },
    { path: "new-java-app", component: _components_new_java_new_java_component__WEBPACK_IMPORTED_MODULE_5__.NewJavaComponent },
    { path: "other", component: _components_charts_charts_component__WEBPACK_IMPORTED_MODULE_1__.ChartsComponent },
];
class AppModule {
}
AppModule.ɵfac = function AppModule_Factory(t) { return new (t || AppModule)(); };
AppModule.ɵmod = /*@__PURE__*/ _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdefineNgModule"]({ type: AppModule, bootstrap: [_app_component__WEBPACK_IMPORTED_MODULE_0__.AppComponent] });
AppModule.ɵinj = /*@__PURE__*/ _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdefineInjector"]({ providers: [{
            provide: angular_highcharts__WEBPACK_IMPORTED_MODULE_7__.HIGHCHARTS_MODULES,
            useFactory: angular_highcharts__WEBPACK_IMPORTED_MODULE_7__.ChartModule
        },], imports: [[
            _angular_common__WEBPACK_IMPORTED_MODULE_8__.CommonModule,
            _angular_platform_browser__WEBPACK_IMPORTED_MODULE_9__.BrowserModule,
            _angular_forms__WEBPACK_IMPORTED_MODULE_10__.FormsModule,
            _angular_common_http__WEBPACK_IMPORTED_MODULE_11__.HttpClientModule,
            _fortawesome_angular_fontawesome__WEBPACK_IMPORTED_MODULE_12__.FontAwesomeModule,
            _angular_router__WEBPACK_IMPORTED_MODULE_13__.RouterModule.forRoot(appRoutes, { enableTracing: true })
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵsetNgModuleScope"](AppModule, { declarations: [_app_component__WEBPACK_IMPORTED_MODULE_0__.AppComponent,
        _components_charts_charts_component__WEBPACK_IMPORTED_MODULE_1__.ChartsComponent,
        _components_personal_report_personal_report_component__WEBPACK_IMPORTED_MODULE_2__.PersonalReportComponent,
        _components_pdf_pdf_component__WEBPACK_IMPORTED_MODULE_3__.PdfComponent,
        _components_report_from_java_report_from_java_component__WEBPACK_IMPORTED_MODULE_4__.ReportFromJavaComponent,
        _components_new_java_new_java_component__WEBPACK_IMPORTED_MODULE_5__.NewJavaComponent], imports: [_angular_common__WEBPACK_IMPORTED_MODULE_8__.CommonModule,
        _angular_platform_browser__WEBPACK_IMPORTED_MODULE_9__.BrowserModule,
        _angular_forms__WEBPACK_IMPORTED_MODULE_10__.FormsModule,
        _angular_common_http__WEBPACK_IMPORTED_MODULE_11__.HttpClientModule,
        _fortawesome_angular_fontawesome__WEBPACK_IMPORTED_MODULE_12__.FontAwesomeModule, _angular_router__WEBPACK_IMPORTED_MODULE_13__.RouterModule] }); })();


/***/ }),

/***/ 655:
/*!*******************************************************!*\
  !*** ./src/app/components/charts/charts.component.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ChartsComponent": () => (/* binding */ ChartsComponent)
/* harmony export */ });
/* harmony import */ var highcharts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! highcharts */ 5972);
/* harmony import */ var highcharts__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(highcharts__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ 3184);


class ChartsComponent {
    constructor() {
        this.title = 'Highcharts';
    }
    // METHODS
    generateSeries(len = 10) {
        this.values = this.getRandomList(30, 100, len);
        var color = '#74c26e';
        var data = [];
        var num = 0;
        for (let value of this.values) {
            if (value < 40) {
                color = '#f2ce72';
            }
            else if (75 > value && value > 40) {
                color = '#b7e08b';
            }
            else {
                color = '#74c26e';
            }
            data.push({
                // x: this.values.indexOf(value),
                x: num,
                y: value,
                color: color,
                name: "Colaboration & Teamwork"
            });
            num += 1;
        }
        return data;
    }
    getRandomList(min, max, length) {
        const data = [];
        for (let i = 0; i < length; i++) {
            data.push(Math.floor(Math.random() * (max - min + 1) + min));
        }
        return data;
    }
    getRandomNumber(min, max) {
        return Math.floor(Math.random() * (max - min + 1) + min);
    }
    createChartGauge1() {
        var chart = new highcharts__WEBPACK_IMPORTED_MODULE_0__.Chart({
            chart: {
                renderTo: 'chart2_02',
                type: 'column',
                width: 300
            },
            title: {
                text: 'Stacked column chart'
            },
            xAxis: {
                categories: ['pre', 'post', 'pre', 'post', 'pre', 'post',]
            },
            yAxis: {
                min: 1,
                max: 5,
                tickInterval: 1,
                title: {
                    text: 'Total fruit consumption'
                },
                stackLabels: {
                    enabled: true,
                    style: {
                        fontWeight: 'bold',
                    }
                }
            },
            legend: {
                align: 'right',
                x: -30,
                verticalAlign: 'top',
                y: 25,
                floating: true,
                borderColor: '#CCC',
                borderWidth: 1,
                shadow: false
            },
            tooltip: {
                headerFormat: '<b>{point.x}</b><br/>',
                pointFormat: '{series.name}: {point.y}<br/>Total: {point.stackTotal}'
            },
            plotOptions: {
                column: {
                    stacking: 'normal',
                    pointPadding: 0.2,
                    dataLabels: {
                        enabled: true
                    }
                }
            },
            series: [
                {
                    name: 'Name1',
                    data: [{
                            x: 0,
                            y: 1,
                        }, {
                            x: 1,
                            y: 2,
                            name: 'custom name',
                        }, {
                            x: 2,
                            y: 1
                        }, {
                            x: 3,
                            y: 1
                        }]
                }, {
                    name: 'Name2',
                    data: [{
                            x: 0,
                            y: 3,
                            color: 'grey',
                        }, {
                            x: 1,
                            y: 3,
                            color: 'green'
                        }, {
                            x: 2,
                            y: 3
                        }, {
                            x: 3,
                            y: 3,
                            color: 'green',
                        }]
                },
            ]
        });
    }
    createChartGauge2() {
        const chart = highcharts__WEBPACK_IMPORTED_MODULE_0__.chart('bar-chart', {
            chart: {
                type: 'bar',
                // add styles
                backgroundColor: {
                    linearGradient: [0, 0, 0, 5000],
                    stops: [
                        [0, 'rgb(255, 255, 255)'],
                        [1, 'rgb(240, 240, 255)']
                    ]
                },
                borderWidth: 0,
                plotBackgroundColor: 'rgba(255, 255, 255, .9)',
                plotShadow: true,
                plotBorderWidth: 1
            },
            title: {
                text: 'Bar Chart',
            },
            subtitle: {
                text: 'Bar Chart subtitle'
            },
            xAxis: {
                categories: ['Apples', 'Bananas', 'Oranges']
            },
            yAxis: {
                min: 0,
                max: 10,
                tickAmount: 11,
                labels: {
                    y: 22, // not sure, but behaives like ~ margin
                },
            },
            series: [{
                    name: 'Jane',
                    data: this.getRandomList(1, 10, 3)
                }, {
                    name: 'John',
                    data: this.getRandomList(1, 10, 3)
                }]
        });
    }
    createLineChart() {
        var chart = new highcharts__WEBPACK_IMPORTED_MODULE_0__.Chart({
            chart: {
                renderTo: 'line-chart', // wich id to follow
            },
            xAxis: {
                type: 'datetime',
                gridLineWidth: 1 // adds border-width of the inner grid
            },
            yAxis: {
                labels: {
                    formatter: function () {
                        return this.value + ' %';
                    }
                },
            },
            title: {
                text: 'Multiline Chart'
            },
            series: [{
                    data: this.getRandomList(25, 30, 8),
                    type: 'line',
                    pointStart: Date.UTC(2022, 4, 5),
                    pointInterval: 24 * 3600 * 1000,
                }, {
                    data: this.getRandomList(25, 30, 8),
                    type: 'line',
                    color: '#F50',
                    pointStart: Date.UTC(2022, 4, 5),
                    pointInterval: 24 * 3600 * 1000,
                }, {
                    data: this.getRandomList(25, 30, 8),
                    type: 'line',
                    pointStart: Date.UTC(2022, 4, 5),
                    pointInterval: 24 * 3600 * 1000,
                }]
        });
    }
    createColumnChart() {
        var chart = new highcharts__WEBPACK_IMPORTED_MODULE_0__.Chart({
            chart: {
                renderTo: 'column',
                type: 'column'
            },
            title: {
                text: 'Column Chart'
            },
            xAxis: {
                title: {
                    text: 'xAxis'
                },
                tickInterval: 1
            },
            yAxis: {
                title: {
                    text: 'yAxis'
                },
                labels: {
                    formatter: function () {
                        return this.value + ' %';
                    }
                },
                tickInterval: 5
            },
            series: [{
                    name: 'Jane',
                    type: 'column',
                    data: this.getRandomList(25, 30, 8)
                }, {
                    name: 'John',
                    type: 'column',
                    data: this.getRandomList(25, 30, 8)
                }],
        });
    }
    createBubbleChart() {
        var chart = new highcharts__WEBPACK_IMPORTED_MODULE_0__.Chart({
            chart: {
                type: 'bubble',
                renderTo: 'bubble',
                plotBorderWidth: 1,
                zoomType: 'xy'
            },
            legend: {
                align: 'left',
                verticalAlign: 'top',
                layout: 'vertical',
                x: 0,
                y: 100,
                bubbleLegend: {
                    enabled: true,
                    minSize: 20,
                    maxSize: 60,
                    ranges: [{
                            value: 14
                        }, {
                            value: 89
                        }]
                }
            },
            tooltip: {
                useHTML: true,
                headerFormat: '<table>',
                pointFormat: '<tr><th colspan="2"><h3>{point.country}</h3></th></tr>' +
                    '<tr><th>Fat intake:</th><td>{point.x}g</td></tr>' +
                    '<tr><th>Sugar intake:</th><td>{point.y}g</td></tr>' +
                    '<tr><th>Obesity (adults):</th><td>{point.z}%</td></tr>',
                footerFormat: '</table>',
                followPointer: true
            },
            plotOptions: {
                series: {
                    dataLabels: {
                        enabled: true,
                        format: '{point.name}'
                    }
                }
            },
            series: [{
                    type: 'bubble',
                    minSize: 40,
                    maxSize: 80,
                    data: [
                        { x: 95, y: 95, z: 13, name: 'BE' },
                        { x: 86.5, y: 102.9, z: 14.7, name: 'DE' },
                        { x: 80.8, y: 91.5, z: 15.8, name: 'FI' },
                        { x: 80.4, y: 102.5, z: 12, name: 'NL' },
                        { x: 80.3, y: 86.1, z: 11.8, name: 'SE' },
                        { x: 78.4, y: 70.1, z: 16.6, name: 'ES' },
                        { x: 74.2, y: 68.5, z: 14.5, name: 'FR' },
                    ]
                }]
        });
    }
    getNegativeStackBar() {
        var categories = [
            'Question+X', 'Question+X', 'Question+X', 'Question+X', 'Question+X',
            'Question+X', 'Question+X', 'Question+X', 'Question+X', 'Question+X',
            'Question+X', 'Question+X', 'Question+X', 'Question+X', 'Question+X',
            'Question+X', 'Question+X', 'Question4', 'Question3', 'Question2',
            'Question+X is very very long and takes even two lines',
        ];
        var chart = new highcharts__WEBPACK_IMPORTED_MODULE_0__.Chart({
            chart: {
                renderTo: 'negative-stack',
                type: 'bar',
                marginLeft: 450,
            },
            title: {
                text: 'getNegativeStackBar'
            },
            accessibility: {
                point: {
                    valueDescriptionFormat: '{index}. Age {xDescription}, {value}%.'
                }
            },
            xAxis: [{
                    categories: categories,
                    // alternateGridColor: '#fff2e8',
                    reversed: false,
                    labels: {
                        step: 1
                    },
                    accessibility: {
                        description: 'Age (male)'
                    }
                }, {
                    opposite: false,
                    reversed: false,
                    categories: categories,
                    linkedTo: 0,
                    labels: {
                        step: 6
                    },
                    accessibility: {
                        description: 'Age (female)'
                    }
                }],
            yAxis: {
                min: 0,
                max: 5,
                title: {
                    text: null
                },
                labels: {
                    distance: -225
                }
            },
            plotOptions: {
                series: {
                    stacking: 'normal'
                }
            },
            series: [
                //   {
                //   name: 'Question',
                //   // color: 'white',
                //   data: [
                //     'text', 'text', 'text', 'text',
                //     'text', 'text', 'text', 'text',
                //     'text', 'text', 'text', 'text',
                //     'text', 'text', 'text', 'text',
                //     'text', 'text', 'text', 'text',
                //     // -3.0,
                //   ]
                // },
                {
                    name: 'Value',
                    data: [
                        2.1, 2.0, 2.1, 2.3, 2.6,
                        2.9, 3.2, 3.1, 2.9, 3.4,
                        4.3, 4.0, 3.5, 2.9, 2.5,
                        2.7, 2.2, 1.1, 1.6, 1.2,
                        2.7, 2.2, 1.1, 1.6, 2.2,
                    ]
                }
            ]
        });
    }
    getPersonalScore() {
        var chart = new highcharts__WEBPACK_IMPORTED_MODULE_0__.Chart({
            chart: {
                renderTo: 'box',
                type: 'column'
            },
            title: {
                text: 'getPersonalScore'
            },
            xAxis: {
                labels: {
                    style: {
                        fontSize: '8px',
                        color: 'grey'
                    }
                },
                categories: [
                    "Self-Awareness",
                    "sa",
                    "cmm",
                    "tm",
                    "hts",
                    "Ho to Say NO",
                    "em",
                    "cs",
                    "pa",
                    "pr",
                    "Colaboration & Teamwork"
                ],
                crosshair: true
            },
            yAxis: {
                min: 0,
                max: 100,
                title: {
                    text: 'Rainfall (mm)'
                },
                tickInterval: 10
            },
            tooltip: {
                headerFormat: '<span style="font-size:10px">{point.key}</span><table>',
                pointFormat: '<tr><td style="color:{series.color};padding:0">{series.name}: </td>' +
                    '<td style="padding:0"><b>{point.y:.1f} %</b></td></tr>',
                footerFormat: '</table>',
                shared: true,
                useHTML: true
            },
            plotOptions: {
                column: {
                    pointPadding: 0.2,
                    borderWidth: 0
                }
            },
            scrollbar: {
                enabled: true
            },
            series: [{
                    color: '#54964d',
                    name: 'Above 75%',
                    data: this.generateSeries()
                },]
        });
    }
    getPersonalScore2() {
        var chart = highcharts__WEBPACK_IMPORTED_MODULE_0__.chart('box2', {
            chart: {
                type: 'column'
            },
            title: {
                text: 'getPersonalScore2'
            },
            xAxis: {
                labels: {
                    style: {
                        fontSize: '8px',
                        color: 'grey'
                    }
                },
                categories: [
                    "Self-Awareness",
                    "sa",
                    "cmm",
                    "tm",
                    "hts",
                    "Ho to Say NO",
                    "em",
                    "cs",
                    "pa",
                    "pr",
                    "Colaboration & Teamwork"
                ],
                crosshair: true
            },
            yAxis: {
                min: 0,
                max: 100,
                title: {
                    text: 'Rainfall (mm)'
                },
                tickInterval: 10
            },
            tooltip: {
                headerFormat: '<span style="font-size:10px">{point.key}</span><table>',
                pointFormat: '<tr><td style="color:{series.color};padding:0">{series.name}: </td>' +
                    '<td style="padding:0"><b>{point.y:.1f} %</b></td></tr>',
                footerFormat: '</table>',
                shared: true,
                useHTML: true
            },
            plotOptions: {
                column: {
                    pointPadding: 0.0,
                    borderWidth: 0
                }
            },
            scrollbar: {
                enabled: true
            },
            series: [{
                    color: '#54964d',
                    name: 'Above 75%',
                    data: [{
                            x: 0,
                            y: 80
                        }, {
                            x: 2,
                            y: 95
                        }, {
                            x: 3,
                            y: 93
                        }, {
                            x: 4,
                            y: 95
                        }]
                },
                {
                    color: '#f50',
                    name: '65%',
                    data: [{
                            x: 1,
                            y: 90
                        }, {
                            x: 5,
                            y: 95
                        }, {
                            x: 6,
                            y: 93
                        }]
                },
            ]
        });
    }
    createSolidgauge() {
        const chart = highcharts__WEBPACK_IMPORTED_MODULE_0__.chart('chart-gauge', {
            chart: {
                type: 'solidgauge',
                width: 200
            },
            title: {
                text: 'Gauge Chart',
            },
            credits: {
                enabled: false,
            },
            pane: {
                startAngle: -90,
                endAngle: 90,
                center: ['50%', '85%'],
                size: '160%',
                background: {
                    innerRadius: '60%',
                    outerRadius: '100%',
                    shape: 'arc',
                },
            },
            yAxis: {
                min: 0,
                max: 100,
                stops: [
                    [0.1, '#55BF3B'],
                    [0.5, '#DDDF0D'],
                    [0.9, '#DF5353'], // red
                ],
                minorTickInterval: null,
                tickAmount: 2,
                labels: {
                    y: 16,
                },
            },
            plotOptions: {
                solidgauge: {
                    dataLabels: {
                        y: -25,
                        borderWidth: 0,
                        useHTML: true,
                    },
                },
            },
            tooltip: {
                enabled: false,
            },
            series: [{
                    name: null,
                    data: [this.getRandomNumber(0, 100)],
                    dataLabels: {
                        format: '<div style="text-align: center"><span style="font-size: 1.25rem">{y}</span></div>',
                    },
                }],
        });
    }
    createChartPie() {
        let date = new Date();
        const data = [];
        for (let i = 0; i < 5; i++) {
            date.setDate(new Date().getDate() + i);
            data.push({
                name: `${date.getDate()}/${date.getMonth() + 1}`,
                y: this.getRandomNumber(0, 1000),
            });
        }
        const chart = highcharts__WEBPACK_IMPORTED_MODULE_0__.chart('chart-pie', {
            chart: {
                type: 'pie',
            },
            title: {
                text: 'Pie Chart',
            },
            credits: {
                enabled: false,
            },
            tooltip: {
                headerFormat: `<span class="mb-2">Date: {point.key}</span><br>`,
                pointFormat: '<span>Amount: {point.y}</span>',
                useHTML: true,
            },
            series: [{
                    name: null,
                    innerSize: '50%',
                    data,
                }],
        });
    }
    //NOT WIRKING
    getPersonalScore1() {
        var chart = highcharts__WEBPACK_IMPORTED_MODULE_0__.chart('bullet', {
            chart: {
                type: 'bullet',
                width: 1200
            },
            series: [{
                    type: 'bullet',
                    data: [{
                            y: 20,
                            target: 50 // The target value of a point
                        }],
                    targetOptions: {
                        width: '140%',
                        height: 3,
                        borderWidth: 0,
                        borderColor: 'black',
                        color: 'black' // The color of the target
                    }
                }]
        });
    }
    ngOnInit() {
        this.createLineChart();
        this.createColumnChart();
        this.createBubbleChart();
        this.createChartGauge2();
        this.createChartPie();
        this.createSolidgauge(),
            this.createChartGauge1(),
            this.getPersonalScore1(),
            this.getPersonalScore2(),
            this.getPersonalScore(),
            this.getNegativeStackBar();
    }
}
ChartsComponent.ɵfac = function ChartsComponent_Factory(t) { return new (t || ChartsComponent)(); };
ChartsComponent.ɵcmp = /*@__PURE__*/ _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineComponent"]({ type: ChartsComponent, selectors: [["app-charts"]], decls: 19, vars: 0, consts: [[1, "container", "mx-auto", "max-w-screen-lg", 2, "margin-bottom", "200px"], ["id", "negative-stack"], [1, "flex"], ["id", "chart2_02"], [1, "mt-20", "w-1/2", 2, "width", "72%", "height", "300px"], ["id", "bar-chart"], ["id", "box"], ["id", "box2"], ["id", "personal-score"], ["id", "column"], [1, "mt-20"], ["id", "line-chart"], ["id", "bubble"], [1, "mt-20", "w-11/12"], ["id", "chart-pie"], [1, "mt-20", "w-1/2"], ["id", "chart-gauge"]], template: function ChartsComponent_Template(rf, ctx) { if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "div", 0);
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelement"](1, "div", 1);
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](2, "div", 2);
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelement"](3, "div", 3);
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](4, "div", 4);
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelement"](5, "div", 5);
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]()();
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelement"](6, "div", 6)(7, "div", 7)(8, "div", 8)(9, "div", 9);
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](10, "div", 10);
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelement"](11, "div", 11);
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](12, "div", 10);
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelement"](13, "div", 12);
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](14, "div", 2)(15, "div", 13);
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelement"](16, "div", 14);
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](17, "div", 15);
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelement"](18, "div", 16);
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]()()();
    } }, styles: ["\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJjaGFydHMuY29tcG9uZW50LnNhc3MifQ== */"] });


/***/ }),

/***/ 8814:
/*!***********************************************************!*\
  !*** ./src/app/components/new-java/new-java.component.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "NewJavaComponent": () => (/* binding */ NewJavaComponent)
/* harmony export */ });
/* harmony import */ var C_Users_diana_Documents_projects_highcharts_core_frontend_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 1670);
/* harmony import */ var highcharts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! highcharts */ 5972);
/* harmony import */ var highcharts__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(highcharts__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var highcharts_modules_exporting__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! highcharts/modules/exporting */ 3916);
/* harmony import */ var highcharts_modules_exporting__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(highcharts_modules_exporting__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var highcharts_modules_xrange__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! highcharts/modules/xrange */ 3678);
/* harmony import */ var highcharts_modules_xrange__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(highcharts_modules_xrange__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/core */ 3184);






var Highcharts_ = __webpack_require__(/*! highcharts */ 5972),
    HighchartsGroupedCategories = __webpack_require__(/*! highcharts-grouped-categories */ 7876)(highcharts__WEBPACK_IMPORTED_MODULE_1__);

highcharts_modules_exporting__WEBPACK_IMPORTED_MODULE_2___default()(highcharts__WEBPACK_IMPORTED_MODULE_1__);
highcharts_modules_xrange__WEBPACK_IMPORTED_MODULE_3___default()(highcharts__WEBPACK_IMPORTED_MODULE_1__);
class NewJavaComponent {
  constructor() {
    this.isEven = Math.ceil(30 / 3) % 2 == 0;

    this.blob2base64 = blob => new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onerror = reject;

      reader.onload = () => resolve(reader.result);

      reader.readAsDataURL(blob);
    });
  }

  convertChartToImg(chart) {
    var _this = this;

    return (0,C_Users_diana_Documents_projects_highcharts_core_frontend_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      var data = {
        options: JSON.stringify(chart),
        filename: 'test.png',
        type: 'image/png'
      }; // Prepare POST data

      const body = new FormData();
      body.append('infile', data.options); // body.append('width', 550);
      // Post it to the export server

      const blob = yield fetch('https://export.highcharts.com/', {
        body,
        method: 'post'
      }).then(result => result.blob()); // Create the image

      const img = new Image();
      img.src = yield _this.blob2base64(blob);
      _this.htmlToAdd = img.src;
      console.log(data.options); // document.getElementById('container4').appendChild(img);
    })();
  }

  functionPlotBandVertical(chart) {
    var plotBands = chart.xAxis[0].plotLinesAndBands;

    for (var i in plotBands) {
      var d = plotBands[i].svgElem.d;
      var dArray = d.split(' ');
      var rect = {
        x: dArray[1],
        y: dArray[5],
        width: 100.5,
        height: 80
      };

      if (parseFloat(i) % 2 != 0) {
        console.log(i);
        chart.renderer.rect(rect.x, rect.y, rect.width, rect.height).attr({
          fill: '#FFF8E4'
        }).add();
      }
    }
  }

  functionPlotBandHorizontal(chart) {
    var plotBands = chart.xAxis[0].plotLinesAndBands;

    for (var i in plotBands) {
      var d = plotBands[i].svgElem.d;
      var dArray = d.split(' ');
      var rect = {
        x: 25,
        y: dArray[5],
        width: 700,
        height: 105
      };

      if (parseFloat(i) % 2 != 0) {
        chart.renderer.rect(rect.x, rect.y, rect.width, rect.height).attr({
          fill: '#FFF8E4'
        }).add();
      }
    }
  }

  getRandomList(min, max, length) {
    const data = [];

    for (let i = 0; i < length; i++) {
      data.push(Math.floor(Math.random() * (max - min + 1) + min));
    }

    return data;
  }

  generateSeries(len = 10) {
    this.values = this.getRandomList(30, 100, len);
    var color = '#74c26e';
    var data = [];
    var num = 0;

    for (let value of this.values) {
      if (value < 40) {
        color = '#f2ce72';
      } else if (75 > value && value > 40) {
        color = '#b7e08b';
      } else {
        color = '#74c26e';
      }

      data.push({
        // x: this.values.indexOf(value),
        x: num,
        y: value,
        color: color,
        name: "Colaboration & Teamwork"
      });
      num += 1;
    }

    return data;
  }

  personalChart1() {
    var chart = highcharts__WEBPACK_IMPORTED_MODULE_1__.chart('chart1', {
      chart: {
        type: 'column',
        width: 900,
        height: 580
      },
      title: {
        text: ''
      },
      xAxis: {
        categories: ["Self-<br>Awareness", "Communication", "Time<br>Management", "How to Sell", "How to Say<br>No", "Effective<br>Meetings", "Critical<br>Thinking", "Planning<br>& Agility", "Professionalism", "Collaboration<br>& Teamwork"],
        labels: {
          style: {
            fontFamily: 'Arial',
            color: '#787878',
            fontSize: '12px',
            textOverflow: 'none'
          }
        },
        tickWidth: 0,
        lineWidth: 0
      },
      yAxis: {
        min: 0,
        max: 100,
        title: {
          text: 'Percent (%)',
          style: {
            fontFamily: 'Arial',
            fontSize: '16px',
            color: '#787878'
          }
        },
        labels: {
          style: {
            fontFamily: 'Arial',
            fontSize: '16px',
            color: '#787878'
          }
        },
        tickWidth: 0,
        gridLineColor: '#e7e6e6'
      },
      credits: false,
      plotOptions: {
        series: {
          grouping: false,
          lineWidth: 2,
          marker: {
            radius: 7
          }
        },
        column: {
          pointPadding: 0.1,
          borderWidth: 0,
          zones: [{
            value: 40,
            color: '#f08c4a'
          }, {
            value: 75,
            color: '#92d050'
          }, {
            color: '#00b050'
          }],
          dataLabels: {
            enabled: true,
            inside: true,
            verticalAlign: 'bottom',
            style: {
              fontFamily: 'Arial',
              fontSize: '16px',
              textOutline: false,
              color: 'black',
              fontWeight: 'notBold'
            },
            format: "{y}%"
          }
        }
      },
      legend: {
        symbolHeight: 14,
        symbolWidth: 14,
        itemStyle: {
          fontFamily: 'Arial',
          fontSize: '18px',
          color: '#787878',
          fontWeight: 'asd'
        }
      },
      series: [{
        type: 'column',
        name: 'Above 75%',
        data: this.getRandomList(40, 100, 10),
        color: '#00b050'
      }, {
        type: 'column',
        name: 'Above 40%',
        data: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        color: '#92d050'
      }, {
        type: 'column',
        name: 'Below 40%',
        color: '#f08c4a'
      }, {
        type: 'spline',
        name: 'Cohort Average',
        data: this.getRandomList(40, 100, 10),
        color: '#cccccc'
      }],
      exporting: {
        sourceWidth: 1430,
        sourceHeight: 880,
        scale: 1,
        enabled: false
      }
    });
    this.convertChartToImg(chart.options);
  }

  personalChart2() {
    var chart = highcharts__WEBPACK_IMPORTED_MODULE_1__.chart('chart2', {
      chart: {
        type: 'bar',
        width: 934,
        height: 1160
      },
      title: {
        text: ''
      },
      xAxis: {
        tickWidth: 0,
        categories: [{
          name: "<b>Self-Awareness</b>",
          categories: ["Why self-awareness is critical to<br/>every professional", "How to be more self-aware", "Why a global awareness is so important"]
        }, {
          name: "<b>Communication</b>",
          categories: ["What is communication, why it's important", "How to communicate", "Effective written communcation"]
        }, {
          name: "<b>Time</b><br/><b>Management</b>",
          categories: ["Awareness of time management, why it's necessary", "Understanding prioritization", "How to manage interruptions"]
        }, {
          name: "<b>How to Sell</b>",
          categories: ["What is sales and how to sell", "The sales process, and why all team<br/>members need to understand it", "How to close sales and deal with objections"]
        }, {
          name: "<b>How to say no</b>",
          categories: ["Why it's important to be able to say no", "How to say no", "What saying no means for a professional"]
        }, {
          name: "<b>Effective</b><br/><b>Meetings</b>",
          categories: ["Why meetings go wrong", "Rules of engagement during meetings", "How to prepare for a meeting and<br/>follow-up after one"]
        }, {
          name: "<b>Critical Thinking</b>",
          categories: ["Why critical thinking is important", "How to apply critical thinking", "Situational awareness and applying<br/>critical thinking in real time"]
        }, {
          name: "<b>Planning &</b><br/><b>Agility</b>",
          categories: ["Why planning and agility are important", "Understanding plans are nothing,<br/>planning is everything & how to plan", "How to implement agility in an organization"]
        }, {
          name: "<b>Professionalism</b>",
          categories: ["What is professionalism", "Understanding and applying attention<br/>to detail and ownership", "Understanding and applying initiative"]
        }, {
          name: "<b>Collaboration &</b><br/><b>Teamwork</b>",
          categories: ["What is collaboration and teamwork<br/>& what makes a good team player", "How to be a collaborative team member", "Understanding affinity bias and<br/>the importance of inclusion"]
        }],
        labels: {
          rotation: 0,
          style: {
            fontFamily: 'Arial',
            fontSize: '14px',
            overflow: 'justify',
            textOverflow: 'none'
          }
        },
        plotBands: [{
          "color": "#ffffff",
          "from": -1,
          "to": 2.5
        }, {
          "color": "#FFF8E4",
          "from": 2.5,
          "to": 5.5
        }, {
          "color": "#ffffff",
          "from": 5.5,
          "to": 8.5
        }, {
          "color": "#FFF8E4",
          "from": 8.5,
          "to": 11.5
        }, {
          "color": "#ffffff",
          "from": 11.5,
          "to": 14.5
        }, {
          "color": "#FFF8E4",
          "from": 14.5,
          "to": 17.5
        }, {
          "color": "#ffffff",
          "from": 17.5,
          "to": 20.5
        }, {
          "color": "#FFF8E4",
          "from": 20.5,
          "to": 23.5
        }, {
          "color": "#ffffff",
          "from": 23.5,
          "to": 26.5
        }, {
          "color": "#FFF8E4",
          "from": 26.5,
          "to": 29.5
        }]
      },
      yAxis: {
        min: 0,
        max: 100,
        title: {
          text: 'Percent (%)',
          style: {
            fontFamily: 'Arial',
            fontSize: '14px'
          }
        },
        labels: {
          style: {
            fontFamily: 'Arial',
            fontSize: '14px'
          }
        }
      },
      credits: false,
      plotOptions: {
        series: {
          borderWidth: 0,
          stacking: 'normal'
        },
        bar: {
          zones: [{
            value: 40,
            color: '#f08c4a'
          }, {
            value: 75,
            color: '#92d050'
          }, {
            color: '#00b050'
          }]
        }
      },
      legend: {
        symbolHeight: 16,
        symbolWidth: 16,
        itemStyle: {
          fontFamily: 'Arial',
          fontSize: '16px',
          color: '#787878',
          fontWeight: 'asd'
        }
      },
      series: [{
        type: 'bar',
        name: 'Above 75%',
        data: this.getRandomList(60, 100, 30),
        color: '#00b050'
      }, {
        id: '1',
        type: 'bar',
        name: 'Above 40%',
        data: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        color: '#92d050'
      }, {
        type: 'column',
        idOfLinkedSeries: '1',
        name: 'Below 40%',
        color: '#f08c4a'
      }, {
        type: 'spline',
        name: 'Cohort Average',
        data: this.getRandomList(60, 100, 30),
        color: '#cccccc'
      }],
      exporting: {
        sourceWidth: 934,
        sourceHeight: 1160,
        scale: 1,
        enabled: false
      }
    });
    this.functionPlotBandHorizontal(chart);
  }

  personalChart3() {
    var chart = highcharts__WEBPACK_IMPORTED_MODULE_1__.chart('chart3', {
      chart: {
        type: 'column',
        height: 600
      },
      title: {
        text: ''
      },
      xAxis: {
        tickWidth: 0,
        categories: [{
          name: "Self-<br/>Awareness",
          categories: ["Pre", "Post"]
        }, {
          name: "Communication",
          categories: ["Pre", "Post"]
        }, {
          name: "Time<br/>Management",
          categories: ["Pre", "Post"]
        }, {
          name: "How to Sell",
          categories: ["Pre", "Post"]
        }, {
          name: "How to Say<br/>No",
          categories: ["Pre", "Post"]
        }, {
          name: "Effective<br/>Meetings",
          categories: ["Pre", "Post"]
        }, {
          name: "Critical<br/>Thinking",
          categories: ["Pre", "Post"]
        }, {
          name: "Planning<br/>& Agility",
          categories: ["Pre", "Post"]
        }, {
          name: "Professionalism",
          categories: ["Pre", "Post"]
        }, {
          name: "Collaboration<br/>& Teamwork",
          categories: ["Pre", "Post"]
        }],
        labels: {
          rotation: 0,
          style: {
            fontFamily: 'Arial',
            color: '#787878',
            fontSize: '14px',
            textOverflow: 'none'
          }
        },
        lineWidth: 0,
        plotBands: [{
          "color": "#ffffff",
          "from": -0.5,
          "to": 1.5
        }, {
          "color": "#FFF8E4",
          "from": 1.5,
          "to": 3.5
        }, {
          "color": "#ffffff",
          "from": 3.5,
          "to": 5.5
        }, {
          "color": "#FFF8E4",
          "from": 5.5,
          "to": 7.5
        }, {
          "color": "#ffffff",
          "from": 7.5,
          "to": 9.5
        }, {
          "color": "#FFF8E4",
          "from": 9.5,
          "to": 11.5
        }, {
          "color": "#ffffff",
          "from": 11.5,
          "to": 13.5
        }, {
          "color": "#FFF8E4",
          "from": 13.5,
          "to": 15.5
        }, {
          "color": "#ffffff",
          "from": 15.5,
          "to": 17.5
        }, {
          "color": "#FFF8E4",
          "from": 17.5,
          "to": 19.5
        }]
      },
      yAxis: {
        min: 0,
        max: 5,
        title: {
          text: ''
        },
        labels: {
          style: {
            fontFamily: 'Arial',
            color: '#787878',
            fontSize: '14px',
            textOverflow: 'none'
          }
        },
        allowDecimals: false,
        gridLineColor: '#e7e6e6'
      },
      credits: false,
      plotOptions: {
        series: {
          stacking: 'normal',
          borderWidth: 0
        }
      },
      legend: {
        symbolHeight: 16,
        symbolWidth: 16,
        itemStyle: {
          fontFamily: 'Arial',
          fontSize: '16px',
          color: '#787878',
          fontWeight: 'asd'
        },
        reversed: true
      },
      series: [{
        type: 'column',
        name: 'Gap to Goal',
        data: [1, 0, 2, 1, 1, 0, 1, 0, 1, 0, 2, 1, 1, 0, 1, 0, 1, 0, 0, 0],
        color: '#edc17c'
      }, {
        type: 'column',
        name: 'Increase in Self Rating',
        data: [0, 5, 0, 4, 0, 5, 0, 5, 0, 5, 0, 4, 0, 5, 0, 5, 0, 5, 0, 0],
        color: '#00b050'
      }, {
        type: 'column',
        name: 'Drop in Self Rating',
        data: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        color: '#92d050'
      }, {
        id: '1',
        type: 'column',
        name: 'Current Rating',
        data: [4, 0, 3, 0, 4, 0, 4, 0, 3, 0, 3, 0, 4, 0, 4, 0, 4, 0, 5, 5],
        color: '#cccccc'
      }],
      exporting: {
        sourceWidth: 1060,
        sourceHeight: 720,
        scale: 1,
        enabled: false
      }
    });
    this.functionPlotBandVertical(chart);
  }

  personalChart4() {
    var chart = highcharts__WEBPACK_IMPORTED_MODULE_1__.chart('chart4', {
      chart: {
        type: 'xrange',
        width: 500,
        height: 150,
        marginLeft: 0,
        marginRight: 20
      },
      xAxis: {
        min: 0,
        max: 100,
        labels: {
          enabled: false,
          format: '{x}%'
        },
        tickInterval: 100,
        visible: false
      },
      yAxis: {
        title: {
          text: ''
        }
      },
      title: {
        text: ''
      },
      plotOptions: {
        xrange: {
          borderWidth: 0,
          grouping: false,
          dataLabels: {
            style: {
              fontSize: 16,
              fontFamily: 'Arial',
              textOutline: false,
              color: '#787878'
            }
          }
        }
      },
      legend: {
        y: 400
      },
      credits: false,
      series: [{
        name: 'series 1',
        borderRadius: 0,
        pointWidth: 30,
        data: [{
          x: 0,
          x2: 40,
          y: 0,
          color: '#f08c4a'
        }, {
          x: 40,
          x2: 75,
          y: 0,
          color: '#92d050',
          dataLabels: {
            enabled: false
          }
        }, {
          x: 75,
          x2: 100,
          y: 0,
          color: '#00b050',
          dataLabels: {
            enabled: true,
            y: 45,
            formatter: function () {
              return '';
            }
          }
        }]
      }, {
        name: 'series 2',
        borderRadius: 1,
        pointWidth: 12,
        data: [{
          x: 0,
          x2: 76,
          y: 0,
          color: 'black',
          dataLabels: {
            enabled: true,
            radius: 10,
            align: "right",
            y: -45,
            formatter: function () {
              return '';
            }
          }
        }]
      }],
      exporting: {
        sourceWidth: 500,
        sourceHeight: 150,
        scale: 1,
        enabled: false
      }
    });
    this.functionXRange(chart);
  }

  functionXRange(chart) {
    var cohortAverage = 65;
    var yourScore = 76;
    var series = chart.series[0],
        xAxis = chart.xAxis[0],
        dataLabel = series.data[2].dataLabel,
        triangle1Size,
        triangle1X,
        triangle1Y,
        triangle1,
        lineX,
        lineY,
        lineHeight,
        line,
        labelX,
        labelX2;
    triangle1Size = 12;
    triangle1X = cohortAverage * 5 - triangle1Size - cohortAverage / 5;
    triangle1Y = dataLabel.y + chart.plotTop + 1;
    lineX = triangle1X + 12;
    lineY = triangle1Y - 56;
    lineHeight = series.itemHeight + 14;
    triangle1 = chart.renderer.path(['M', triangle1X, triangle1Y, triangle1X + triangle1Size, triangle1Y - triangle1Size - 15, triangle1X + 2 * triangle1Size, triangle1Y, 'z']).attr({
      fill: '#787878'
    }).add();
    line = chart.renderer.path(['M', lineX, lineY, 'v', lineHeight]).attr({
      stroke: '#787878',
      'stroke-width': '4px'
    }).add();
    line.toFront();
    triangle1.toFront();
    labelX = series.data[1].x;
    labelX2 = series.data[1].x2;

    if (cohortAverage <= 83 && cohortAverage >= 9) {
      chart.renderer.text('Cohort Average', lineX - 104, lineY + 80).css({
        'font-size': '24px',
        'font-family': 'Arial Black',
        'color': '#787878'
      }).add();
    } else if (cohortAverage <= 8) {
      chart.renderer.text('Cohort Average', chart.plotLeft, lineY + 80).css({
        'font-size': '24px',
        'font-family': 'Arial Black',
        'color': '#787878'
      }).add();
    } else {
      chart.renderer.text('Cohort Average', 295, lineY + 80).css({
        'font-size': '24px',
        'font-family': 'Arial Black',
        'color': '#787878'
      }).add();
    }

    var series2 = chart.series[1],
        xAxis2 = chart.xAxis[0],
        dataLabel2 = series2.data[0].dataLabel,
        triangle2Size,
        triangle2X,
        triangle2Y,
        triangle2;
    triangle2Size = 12;
    triangle2X = series2.data[0].x2 * 5 - triangle2Size - yourScore / 5;
    triangle2Y = dataLabel2.y + chart.plotTop + 18;
    triangle2 = chart.renderer.path(['M', triangle2X, triangle2Y, triangle2X + triangle2Size, triangle2Y + triangle2Size + 15, triangle2X + 2 * triangle2Size, triangle2Y, 'z']).attr({
      fill: 'black'
    }).add();
    triangle2.toFront();

    if (series2.data[0].x2 <= 89 && series2.data[0].x2 >= 9) {
      chart.renderer.text('Your Score', triangle2X - 60, triangle2Y - 10).css({
        'font-size': '24px',
        'font-family': 'Arial Black'
      }).add();
    } else if (series2.data[0].x2 <= 8) {
      chart.renderer.text('Your Score', chart.plotLeft, triangle2Y - 10).css({
        'font-size': '24px',
        'font-family': 'Arial Black'
      }).add();
    } else {
      chart.renderer.text('Your Score', 357, triangle2Y - 10).css({
        'font-size': '24px',
        'font-family': 'Arial Black'
      }).add();
    }

    var minPercentageText = chart.renderer.text('0%', chart.plotLeft, triangle2Y + 70).css({
      'font-size': '24px',
      'font-family': 'Arial',
      'color': '#787878'
    }).add();
    var maxPercentageText = chart.renderer.text('100%', 440, triangle2Y + 70).css({
      'font-size': '24px',
      'font-family': 'Arial',
      'color': '#787878'
    }).add();
  } // private personalChart1_7(): void {
  //   var chart = Highcharts.chart('chart1_7', {
  //       chart: {
  //           type: 'column'
  //       },
  //       title: {
  //           text: ''
  //       },
  //       xAxis: {
  //         categories: ["Self-<br>Awareness", "Communication", "Time<br>Management", "How to Sell", "How to Say<br>No", "Effective<br>Meetings", "Critical<br>Thinking"],
  //           labels: {
  //              style: {
  //               fontFamily: 'Arial',
  //                 color: '#787878',
  //                 fontSize: '24px',
  //                 textOverflow: 'none'
  //             }
  //           },
  //       tickWidth: 0,
  //         lineWidth: 0
  //       },
  //       yAxis: {
  //           min: 0,
  //           max: 100,
  //           title: {
  //               text: 'Percent (%)',
  //               style: {
  //           fontFamily: 'Arial',
  //           fontSize: '24px',
  //           color: '#787878'
  //         }
  //           },
  //           labels: {
  //         style: {
  //           fontFamily: 'Arial',
  //           fontSize: '24px',
  //           color: '#787878'
  //         }
  //           },
  //       tickWidth: 0,
  //           gridLineColor: '#e7e6e6'
  //       },
  //       credits: false,
  //       plotOptions: {
  //       series: {
  //         grouping: false,
  //         lineWidth: 4,
  //         marker: {
  //           radius: 7
  //         }
  //           },
  //           column: {
  //               zones: [{
  //                   value: 39,
  //                   color: '#f08c4a'
  //               },{
  //           value: 75,
  //                   color: '#92d050'
  //               }, {
  //                   color: '#00b050'
  //               }],
  //               dataLabels: {
  //                   enabled: true,
  //                   inside: true,
  //                   verticalAlign:'bottom',
  //                   style: {
  //             fontFamily: 'Arial',
  //             fontSize: '24px',
  //                       textOutline: false,
  //                       color: 'black',
  //                       fontWeight: 'notBold'
  //                   },
  //                   format: "{y}%",
  //                   // formatter:function(): any {
  //                   //     return "{y}%";
  //                   // }
  //               }
  //           }
  //       },
  //       legend: {
  //           symbolHeight: 24,
  //           symbolWidth: 24,
  //       itemStyle: {
  //         fontFamily: 'Arial',
  //         fontSize: '28px',
  //         color: '#787878',
  //         fontWeight: 'asd'
  //           }
  //       },
  //       series: [{
  //           type: 'column',
  //           name: 'Above 75%',
  //           data: this.getRandomList(40, 100, 7),
  //           color: '#00b050'
  //         }, {
  //           type: 'column',
  //           name: 'Above 40%',
  //           data: [0, 0, 0, 0, 0, 0, 0],
  //           color: '#92d050'
  //         }, {
  //           type: 'column',
  //           name: 'Below 40%',
  //           color: '#f08c4a'
  //         }, {
  //           type: 'spline',
  //           name: 'Cohort Average',
  //           data: this.getRandomList(40, 100, 7),
  //           color: '#cccccc'
  //         }
  //      ],
  //      exporting: {
  //       sourceWidth: 1430,
  //       sourceHeight: 880,
  //       scale: 1,
  //       enabled: false
  //      }
  //   } as any)
  // }
  // public personalChart2_7(): void {
  //   var chart = Highcharts.chart('chart2_7', {
  //     chart: {
  //       type: 'bar',
  //       // "events":{
  //       //   "load": function() {
  //       //     var plotBands = this.xAxis[0].plotLinesAndBands;
  //       //     for (var i in plotBands) {
  //       //       var d = plotBands[i].svgElem.d;
  //       //       var dArray = d.split(' ');
  //       //       var rect = {x: 25, y: dArray[5], width: 700, height: 139};
  //       //       if (i % 2 != 0) {
  //       //         this.renderer.rect(rect.x, rect.y, rect.width, rect.height).attr({fill: '#FFF8E4'}).add();
  //       //       }
  //       //     }
  //       //   }
  //       // }
  //   },
  //   title: {
  //       text: ''
  //   },
  //   xAxis: {
  //       // categories: [ {
  //       	// name: "<b>Self-Awareness</b>",
  //         // categories: ["Why self-awareness critical to every professional", "How to be more self-aware", "Why a global awareness is so important"]
  //       // }],
  //       // {
  //       // 	name: "<b>Communication</b>",
  //       //   categories: ["What is communication, why it's important", "How to communicate", "Effective written communcation"]
  //       // }, {
  //       // 	name: "<b>Time Management</b>",
  //       //   categories: ["Awareness of time management, why it's necessary", "Understanding prioritization", "How to manage interruptions"]
  //       // }, {
  //       // 	name: "<b>How to Sell</b>",
  //       //   categories: ["What is sales and how to sell", "The sales process, and why all<br/>team members need to understand it", "How to close sales and deal with objections"]
  //       // }, {
  //       // 	name: "<b>How to say no</b>",
  //       //   categories: ["Why it's important to be able to say no", "How to say no", "What saying no means for a professional"]
  //       // }, {
  //       // 	name: "<b>Effective Meetings</b>",
  //       //   categories: ["Why meetings go wrong", "Rules of engagement during meetings", "How to prepare for a meeting and<br/>follow-up after one"]
  //       // }, {
  //       // 	name: "<b>Critical Thinking</b>",
  //       //   categories: ["Why critical thinking is important", "How to apply critical thinking", "Situational awareness and<br/>applying critical thinking in real time"]
  //       // }],
  //       labels: {
  //       	rotation: 0,
  // 		style: {
  // 			fontFamily: 'Arial',
  // 			fontSize: '14px',
  // 			overflow: 'justify',
  // 			textOverflow: 'none'
  // 		}
  //       },
  //       "plotBands":[{"color":"#ffffff","from":-1,"to":2.5},{"color":"#FFF8E4","from":2.5,"to":5.5},{"color":"#ffffff","from":5.5,"to":8.5},{"color":"#FFF8E4","from":8.5,"to":11.5},{"color":"#ffffff","from":11.5,"to":14.5},{"color":"#FFF8E4","from":14.5,"to":17.5},{"color":"#ffffff","from":17.5,"to":20.5}]
  //   },
  //   yAxis: {
  //       min: 0,
  //       max: 100,
  //       title: {
  //           text: 'Percent (%)',
  //           style: {
  // 			fontFamily: 'Arial',
  //         		fontSize: '14px'
  //         	}
  //       },
  //       labels: {
  // 		style: {
  // 			fontFamily: 'Arial',
  //         		fontSize: '14px'
  // 		}
  //       }
  //   },
  //   credits: false,
  //   plotOptions: {
  // 	series: {
  //           borderWidth: 0,
  // 		stacking: 'normal'
  // 	},
  //       bar: {
  // 		zones: [{
  // 			value: 39,
  // 			color: '#f08c4a'
  // 		},{
  // 			value: 75,
  // 			color: '#92d050'
  // 		}, {
  // 			color: '#00b050'
  // 		}]
  //       }
  //   },
  //   legend: {
  //       symbolHeight: 16,
  //       symbolWidth: 16,
  // 	itemStyle: {
  // 		fontFamily: 'Arial',
  // 		fontSize: '16px',
  // 		color: '#787878',
  // 		fontWeight: 'asd'
  // 	}
  //   },
  //   series: [{
  //       type: 'bar',
  //       name: 'Above 75%',
  //       data: this.getRandomList(60, 100, 24),
  //       color: '#00b050'
  //     }, {
  //   		id: '1',
  //       type: 'bar',
  //       name: 'Above 40%',
  //       data: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  // 	color: '#92d050'
  //     }, {
  //     	type: 'column',
  //     	idOfLinkedSeries: '1',
  //     	name: 'Below 40%',
  // 	color: '#f08c4a'
  //     }, {
  //     	type: 'spline',
  //       name: 'Cohort Average',
  //       data: this.getRandomList(70, 100, 24),
  // 	color: '#cccccc'
  //     }
  //  ],
  //  exporting: {
  // 	sourceWidth: 934,
  // 	sourceHeight: 1080,
  // 	scale: 1,
  // 	enabled: false
  //  }
  //   } as any)
  // }
  // public personalChart3_7(): void {
  //   var chart = Highcharts.chart('chart3_7', {
  //     chart: {
  //       type: 'column',
  //       // "events":{
  //       // 	"load": function() {
  //       //     var plotBands = this.xAxis[0].plotLinesAndBands;
  //       //     for (var i in plotBands) {
  //       //       var d = plotBands[i].svgElem.d;
  //       //       var dArray = d.split(' ');
  //       //       var rect = {x: dArray[1], y: dArray[5], width: 146, height: 85};
  //       //       if (i % 2 != 0) {
  //       //         this.renderer.rect(rect.x, rect.y, rect.width, rect.height).attr({fill: '#FFF8E4'}).add();
  //       //       }
  //       //     }
  //   	  //   }
  //     	// }
  //   },
  //   title: {
  //       text: ''
  //   },
  //   xAxis: {
  //       categories: [ {
  //       	name: "Self-<br/>Awareness",
  //         categories: ["Pre", "Post"]
  //       }, {
  //       	name: "Communication",
  //         categories: ["Pre", "Post"]
  //       }, {
  //       	name: "Time<br/>Management",
  //         categories: ["Pre", "Post"]
  //       }, {
  //       	name: "How to Sell",
  //         categories: ["Pre", "Post"]
  //       }, {
  //       	name: "How to Say<br/>No",
  //         categories: ["Pre", "Post"]
  //       }, {
  //       	name: "Effective<br/>Meetings",
  //         categories: ["Pre", "Post"]
  //       }, {
  //       	name: "Critical<br/>Thinking",
  //         categories: ["Pre", "Post"]
  //       }],
  //       labels: {
  // 		rotation: 0,
  // 		style: {
  // 			fontFamily: 'Arial',
  //         		color: '#787878',
  // 			fontSize: '16px',
  // 			textOverflow: 'none'
  // 		}
  //       },
  //   	lineWidth: 0,
  //       "plotBands":[{"color":"#ffffff","from":-0.5,"to":1.5},{"color":"#FFF8E4","from":1.5,"to":3.5},{"color":"#ffffff","from":3.5,"to":5.5},{"color":"#FFF8E4","from":5.5,"to":7.5},{"color":"#ffffff","from":7.5,"to":9.5},{"color":"#FFF8E4","from":9.5,"to":11.5},{"color":"#ffffff","from":11.5,"to":13.5}]
  //   },
  //   yAxis: {
  //       min: 0,
  //       max: 5,
  //       title: {
  //           text: ''
  //       },
  //       labels: {
  // 		style: {
  // 			fontFamily: 'Arial',
  // 			color: '#787878',
  // 			fontSize: '16px',
  // 			textOverflow: 'none'
  // 		}
  //       },
  //       allowDecimals: false,
  //       gridLineColor: '#e7e6e6'
  //   },
  //   credits: false,
  //   plotOptions: {
  // 	series: {
  // 		stacking: 'normal',
  // 		borderWidth: 0
  //       }
  //   },
  //   legend: {
  //       symbolHeight: 16,
  //       symbolWidth: 16,
  // 	itemStyle: {
  // 		fontFamily: 'Arial',
  // 		fontSize: '16px',
  // 		color: '#787878',
  // 		fontWeight: 'asd'
  //       },
  // 	reversed: true
  //   },
  //   series: [
  //   	{
  //     	type: 'column',
  //     	name: 'Gap to Goal',
  //       data: this.getRandomList(1, 1, 14),
  //       color: '#edc17c'
  //     }, {
  //     	type: 'column',
  //     	name: 'Increase in Self Rating',
  //       data: this.getRandomList(2, 3, 14),
  //       color: '#00b050'
  //     }, {
  //     	type: 'column',
  //     	name: 'Drop in Self Rating',
  //       data: this.getRandomList(1, 2, 14),
  //       color: '#92d050'
  //     }, {
  //   		id: '1',
  //       type: 'column',
  //       name: 'Current Rating',
  //       data: this.getRandomList(3, 4, 14),
  //       color: '#cccccc'
  // 	}
  // ],
  // exporting: {
  //  		sourceWidth: 1060,
  // 	sourceHeight: 720,
  // 	scale: 1,
  // 	enabled: false
  // }
  //   } as any)
  // }
  // public personalChart4_7(): void {
  //   var chart = Highcharts.chart('chart4_7', {
  //       chart: {
  //         type: 'xrange',
  //         width: 500,
  //       height: 150,
  //         marginLeft: 0,
  //         marginRight: 20
  //       },
  //       xAxis: {
  //         min: 0,
  //         max: 100,
  //         labels: {
  //           enabled: false,
  //           format: "{x%}"
  //         },
  //         tickInterval: 100,
  //         visible: false
  //       },
  //       yAxis: {
  //         title: {
  //           text: ''
  //         }
  //       },
  //       title: {
  //       text:''
  //     },
  //       plotOptions: {
  //           xrange: {
  //             borderWidth: 0,
  //             grouping: false,
  //             dataLabels: {
  //                 style: {
  //                     fontSize: 16,
  //                     fontFamily: 'Arial',
  //                     textOutline: false,
  //                     color: '#787878'
  //                 }
  //             }
  //           }
  //       },
  //     legend: {
  //           y: 400
  //     },
  //     credits: false,
  //       series: [{
  //         name: 'series 1',
  //         borderRadius: 0,
  //         pointWidth: 30,
  //         data: [{
  //           x: 0,
  //           x2: 40,
  //           y: 0,
  //           color: '#f08c4a'
  //         }, {
  //           x: 40,
  //           x2: 75,
  //           y: 0,
  //           color: '#92d050',
  //           dataLabels: {
  //             enabled: false
  //           }
  //         }, {
  //           x: 75,
  //           x2: 100,
  //           y: 0,
  //           color: '#00b050',
  //           dataLabels: {
  //             enabled: true,
  //             y: 45,
  //             formatter: function() {
  //               return '';
  //             }
  //           }
  //         }]
  //          }, {
  //           name: 'series 2',
  //           borderRadius: 1,
  //           pointWidth: 12,
  //           data: [{
  //             x: 0,
  //             x2: 75,
  //             y: 0,
  //             color: 'black',
  //             dataLabels: {
  //               enabled: true,
  //               radius: 10,
  //                align: "right",
  //               y: -45,
  //               formatter: function() {
  //                 return '';
  //               }
  //             }
  //           }]
  //          }],
  //     exporting: {
  //       sourceWidth: 500,
  //       sourceHeight: 150,
  //       scale: 1,
  //       enabled: false
  //      }
  //   } as any)
  //   this.convertChartToImg(chart.options)
  // }


  ngOnInit() {
    this.personalChart1();
    this.personalChart2();
    this.personalChart3();
    this.personalChart4(); // this.personalChart1_7();
    // this.personalChart2_7();
    // this.personalChart3_7();
    // this.personalChart4_7();
  }

}

NewJavaComponent.ɵfac = function NewJavaComponent_Factory(t) {
  return new (t || NewJavaComponent)();
};

NewJavaComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineComponent"]({
  type: NewJavaComponent,
  selectors: [["app-new-java"]],
  decls: 18,
  vars: 0,
  consts: [[1, "charts"], [2, "margin-bottom", "160px"], ["id", "chart4"], [1, "my-20"], ["id", "chart1"], ["id", "chart2"], ["id", "chart3"], [1, "my-32", "text-center", "text-xl"], ["id", "chart1_7"], ["id", "chart2_7"], ["id", "chart3_7"], ["id", "chart4_7"]],
  template: function NewJavaComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](0, "div", 0)(1, "div", 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelement"](2, "div", 2);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](3, "p", 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](4, "Lorem ipsum dolor sit amet consectetur adipisicing elit. Consequuntur vel odit culpa aspernatur non rerum consequatur quia dolore excepturi cum harum unde veritatis voluptate facilis, numquam explicabo inventore tempore iste. Beatae laudantium doloremque soluta atque? Repudiandae temporibus, earum tenetur voluptatibus, sapiente asperiores provident totam voluptas vel cupiditate nobis minus doloribus impedit repellendus commodi dolorum amet e pariatur laudantium quidem!");
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelement"](5, "div", 4);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](6, "p", 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](7, "Lorem ipsum dolor sit amet consectetur adipisicing elit. Consequuntur vel odit culpa aspernatur non rerum consequatur quia dolore excepturi cum harum unde veritatis voluptate facilis, numquam explicabo inventore tempore iste. Beatae laudantium doloremque soluta atque?sit amet consectetur adipisicing elit. Consequuntur vel odit culpa aspernatur non rerum consequatur quia dolore excepturi cum harum unde veritatis voluptate facilis, numquam explicabo inventore tempore iste. Beatae laudantium doloremque soluta atque? Repudiandae temporibus, earum tenetur voluptatibus, Repudiandae temporibus, earum tenetur voluptatibus, sapiente asperiores provident totam voluptas vel cupiditate nobis minus doloribus impedit repellendus commodi dolorum amet e pariatur laudantium quidem!");
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelement"](8, "div", 5);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](9, "p", 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](10, "Lorem ipsum dolor sit amet consectetur adipisicing elit. Consequuntur vel odit culpa aspernatur non rerum consequatur quia dolore excepturi cum harum unde veritatis voluptate facilis, numquam explicabo inventore tempore iste. Beatae laudantium doloremque soluta atque? sit amet consectetur adipisicing elit. Consequuntur vel odit culpa aspernatur non rerum consequatur quia dolore excepturi cum harum unde veritatis voluptate facilis, numquam explicabo inventore tempore iste. Beatae laudantium doloremque soluta atque? Repudiandae temporibus, earum tenetur voluptatibus,Repudiandae temporibus, earum tenetur voluptatibus, sapiente asperiores provident totam voluptas vel cupiditate nobis minus doloribus impedit repellendus commodi dolorum amet e pariatur laudantium quidem!");
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelement"](11, "div", 6);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementStart"](12, "h2", 7);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵtext"](13, "GBS1");
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelement"](14, "div", 8)(15, "div", 9)(16, "div", 10)(17, "div", 11);
      _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵelementEnd"]()();
    }
  },
  styles: [".charts[_ngcontent-%COMP%] {\n  width: 900px;\n  margin: auto;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5ldy1qYXZhLmNvbXBvbmVudC5zYXNzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsWUFBQTtFQUNBLFlBQUE7QUFDRiIsImZpbGUiOiJuZXctamF2YS5jb21wb25lbnQuc2FzcyIsInNvdXJjZXNDb250ZW50IjpbIi5jaGFydHNcclxuICB3aWR0aDo5MDBweFxyXG4gIG1hcmdpbjogYXV0b1xyXG5cclxuXHJcbiJdfQ== */"]
});

/***/ }),

/***/ 3405:
/*!*************************************************!*\
  !*** ./src/app/components/pdf/pdf.component.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PdfComponent": () => (/* binding */ PdfComponent)
/* harmony export */ });
/* harmony import */ var highcharts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! highcharts */ 5972);
/* harmony import */ var highcharts__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(highcharts__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ 3184);


class PdfComponent {
    constructor() {
        this.fourColor = [
            '#7f7f7f',
            '#595959',
            '#6dbc78',
            '#34834a',
        ];
        this.fy = ['FY 18-19', 'FY 19-20', 'FY 20-21', 'FY 21-22',];
        // base schema for column charts
        this.gbdDiffSchema = {
            chart: {
                renderTo: '',
                type: 'column',
                height: 450,
                width: 350,
                backgroundColor: '#000',
            },
            title: {
                text: "",
                align: 'center',
                verticalAlign: 'bottom',
                style: {
                    color: '#fff',
                    fontSize: '20px',
                }
            },
            xAxis: {
                categories: this.fy,
                labels: {
                    style: {
                        color: '#fff',
                        fontSize: '12px',
                    },
                },
            },
            yAxis: {
                max: 120,
                gridLineWidth: 0,
                stackLabels: {
                    enabled: true,
                    verticalAlign: 'top',
                },
                labels: {
                    enabled: false
                },
                title: {
                    text: null
                }
            },
            series: [
                {
                    data: [0,]
                },
            ],
            plotOptions: {
                column: {
                    stacking: '',
                    colorByPoint: true,
                    borderWidth: 0,
                    pointWidth: 30,
                },
                series: {
                    dataLabels: {
                        enabled: true,
                        format: "{y}%",
                        style: {
                            color: '#fff',
                            fontSize: '20px',
                            fontWeight: 100
                        },
                        allowOverlap: true
                    }
                }
            },
            colors: this.fourColor,
            legend: {
                enabled: false,
                verticalAlign: 'top',
                itemStyle: {
                    color: '#fff',
                    fontSize: '13px',
                    fontWeight: 100
                }
            },
            credits: {
                enabled: false
            },
        };
    }
    // stacking chart's settings
    stackingSettings(series, renderTo, text) {
        var gbdDiffSchema = JSON.parse(JSON.stringify(this.gbdDiffSchema));
        gbdDiffSchema.chart.renderTo = renderTo;
        gbdDiffSchema.title.text = text;
        gbdDiffSchema.series = series;
        gbdDiffSchema.chart.width = 500;
        gbdDiffSchema.plotOptions.column.stacking = 'normal';
        gbdDiffSchema.plotOptions.column.colorByPoint = false;
        gbdDiffSchema.plotOptions.column.pointWidth = 40;
        gbdDiffSchema.plotOptions.series.dataLabels.style.fontSize = '18px';
        gbdDiffSchema.yAxis.stackLabels.enabled = false,
            gbdDiffSchema.legend.enabled = true;
        return gbdDiffSchema;
    }
    increaseCompletionRates() {
        var gbdDiffSchema = JSON.parse(JSON.stringify(this.gbdDiffSchema));
        // var gbdDiffSchema = Object.assign({}, this.gbdDiffSchema)
        gbdDiffSchema.chart.renderTo = 'increaseCompletionRates';
        gbdDiffSchema.title.text = 'Increased Completion Rates';
        gbdDiffSchema.title.verticalAlign = 'top';
        gbdDiffSchema.series[0].data = [82, 78, 88, 92];
        var chart = new highcharts__WEBPACK_IMPORTED_MODULE_0__.Chart(gbdDiffSchema);
    }
    highCertificationRates() {
        var gbdDiffSchema = JSON.parse(JSON.stringify(this.gbdDiffSchema));
        // var gbdDiffSchema = Object.assign({}, this.gbdDiffSchema)
        gbdDiffSchema.chart.renderTo = 'highCertificationRates';
        gbdDiffSchema.title.text = 'High Certification Rates';
        gbdDiffSchema.title.verticalAlign = 'top';
        gbdDiffSchema.series[0].data = [94, 87, 81, 80];
        var chart = new highcharts__WEBPACK_IMPORTED_MODULE_0__.Chart(gbdDiffSchema);
    }
    highSkellsGain() {
        var gbdDiffSchema = JSON.parse(JSON.stringify(this.gbdDiffSchema));
        gbdDiffSchema.chart.renderTo = 'highSkellsGain';
        // gbdDiffSchema.title.text = 'High Certification Rates'
        gbdDiffSchema.series[0].data = [67, 57, 51, 48];
        var chart = new highcharts__WEBPACK_IMPORTED_MODULE_0__.Chart(gbdDiffSchema);
    }
    consistentConfidenceGain() {
        var gbdDiffSchema = JSON.parse(JSON.stringify(this.gbdDiffSchema));
        gbdDiffSchema.chart.renderTo = 'consistentConfidenceGain';
        gbdDiffSchema.series[0].data = [50, 58, 60, 59];
        var chart = new highcharts__WEBPACK_IMPORTED_MODULE_0__.Chart(gbdDiffSchema);
    }
    persentageOfEnrolmentByRole() {
        let renderTo = 'persentageOfEnrolmentByRole';
        let text = 'Percentage of Enrolment  by Role';
        var series = [{
                name: 'Manager',
                data: [44, 36, 40, 35],
                color: '#7f7f7f',
                dataLabels: {
                    style: {
                        fontSize: "18px",
                        color: "#000",
                        fontWeight: 600
                    },
                },
            }, {
                name: 'Individual Contributor',
                data: [56, 64, 60, 65],
                color: '#34834aed'
            }];
        var chart = new highcharts__WEBPACK_IMPORTED_MODULE_0__.Chart(this.stackingSettings(series, renderTo, text));
    }
    persentageOfEnrolmentByExperience() {
        let renderTo = 'persentageOfEnrolmentByExperience';
        let text = 'Percentage of Enrolment by Experience';
        var series = [{
                name: '15 years',
                data: [3, 16, 20, 21],
                color: '#ddd64e',
                dataLabels: {
                    style: {
                        fontSize: "18px",
                        color: "#000",
                        fontWeight: 600
                    },
                },
            }, {
                name: '10-15 years',
                data: [9, 24, 32, 31],
                color: '#34834aed'
            }, {
                name: '5-10 years',
                data: [24, 28, 31, 27],
                color: '#6dbc78'
            }, {
                name: '< 5 years',
                data: [64, 31, 18, 21],
                color: '#7f7f7f'
            }];
        var chart = new highcharts__WEBPACK_IMPORTED_MODULE_0__.Chart(this.stackingSettings(series, renderTo, text));
    }
    worckExperiencePieChart() {
        let series = [{
                name: null,
                innerSize: '50%',
                data: [23, 45, 12],
            }];
        let gbdDiffSchema = JSON.parse(JSON.stringify(this.gbdDiffSchema));
        gbdDiffSchema.chart.renderTo = 'worckExperiencePieChart';
        gbdDiffSchema.chart.type = 'pie';
        gbdDiffSchema.series = series;
        var chart = new highcharts__WEBPACK_IMPORTED_MODULE_0__.Chart(gbdDiffSchema);
    }
    ngOnInit() {
        this.increaseCompletionRates(),
            this.highCertificationRates();
        this.highSkellsGain(),
            this.consistentConfidenceGain(),
            this.persentageOfEnrolmentByRole(),
            this.persentageOfEnrolmentByExperience(),
            this.worckExperiencePieChart();
    }
}
PdfComponent.ɵfac = function PdfComponent_Factory(t) { return new (t || PdfComponent)(); };
PdfComponent.ɵcmp = /*@__PURE__*/ _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineComponent"]({ type: PdfComponent, selectors: [["app-pdf"]], decls: 21, vars: 0, consts: [["id", "body", 1, "w-full", "h-full"], [1, "content", "w-fit", 2, "margin", "auto"], [1, "gbs-diff", "flex", "m-8", "w-fit", "mx-auto"], ["id", "increaseCompletionRates", 1, "mx-8"], ["id", "highCertificationRates", 1, "mx-8"], ["id", "highSkellsGain", 1, "mx-8"], ["id", "consistentConfidenceGain", 1, "mx-8"], [2, "margin", "50px 0"], [2, "color", "yellow"], [1, "gbs-diff", "flex", "m-8", "w-fit"], ["id", "persentageOfEnrolmentByExperience", 1, "mx-8"], ["id", "persentageOfEnrolmentByRole", 1, "mx-8"], ["id", "worckExperiencePieChart"]], template: function PdfComponent_Template(rf, ctx) { if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "div", 0)(1, "div", 1)(2, "h2");
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](3, "THE GBS DIFFERENCE");
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](4, "div", 2);
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelement"](5, "div", 3)(6, "div", 4);
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](7, "div", 2);
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelement"](8, "div", 5)(9, "div", 6);
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelement"](10, "hr", 7);
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](11, "h2");
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](12, "Experienced learner enrolment rates ");
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelement"](13, "br");
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](14, "span", 8);
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](15, "steadily increased year on year.");
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]()();
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](16, "div", 9);
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelement"](17, "div", 10)(18, "div", 11);
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](19, "div", 9);
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelement"](20, "div", 12);
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]()()();
    } }, styles: ["h2[_ngcontent-%COMP%] {\n  font-size: 45px;\n  color: #fff;\n  padding-top: 50px;\n  margin-left: 50px;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBkZi5jb21wb25lbnQuc2FzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGVBQUE7RUFDQSxXQUFBO0VBQ0EsaUJBQUE7RUFDQSxpQkFBQTtBQUNGIiwiZmlsZSI6InBkZi5jb21wb25lbnQuc2FzcyIsInNvdXJjZXNDb250ZW50IjpbImgyXHJcbiAgZm9udC1zaXplOiA0NXB4XHJcbiAgY29sb3I6ICNmZmZcclxuICBwYWRkaW5nLXRvcDogNTBweFxyXG4gIG1hcmdpbi1sZWZ0OiA1MHB4XHJcbiJdfQ== */", "#body[_ngcontent-%COMP%] {\n    background-color: black;\n    }"] });


/***/ }),

/***/ 8737:
/*!*************************************************************************!*\
  !*** ./src/app/components/personal-report/personal-report.component.ts ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PersonalReportComponent": () => (/* binding */ PersonalReportComponent)
/* harmony export */ });
/* harmony import */ var C_Users_diana_Documents_projects_highcharts_core_frontend_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 1670);
/* harmony import */ var highcharts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! highcharts */ 5972);
/* harmony import */ var highcharts__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(highcharts__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var highcharts_modules_bullet__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! highcharts/modules/bullet */ 8024);
/* harmony import */ var highcharts_modules_bullet__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(highcharts_modules_bullet__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @fortawesome/free-solid-svg-icons */ 610);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/core */ 3184);
/* harmony import */ var _servises_personal_report_data_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../servises/personal-report-data.service */ 7884);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/common */ 6362);

 // import * as Bullet from 'highcharts/modules/bullet';







const _c0 = function (a0) {
  return {
    "margin-left": a0
  };
};

class PersonalReportComponent {
  constructor(personalReportDataService) {
    this.personalReportDataService = personalReportDataService;
    this.faCaretDown = _fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_4__.faCaretDown;

    this.blob2base64 = blob => new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onerror = reject;

      reader.onload = () => resolve(reader.result);

      reader.readAsDataURL(blob);
    });

    this.y = Math.floor(Math.random() * 100);
    this.target = Math.floor(Math.random() * 100);
    this.isEven = Math.ceil(30 / 3) % 2 == 0;
  } // private options: any = {
  //   chart: {},
  //   xAxis: {
  //     categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',
  //       'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'
  //     ]
  //   },
  //   series: [{
  //     data: [29.9, 71.5, 106.4, 129.2, 144.0, 176.0, 135.6, 148.5, 216.4, 194.1, 95.6, 54.4],
  //     type: 'column'
  //   }]
  // }
  // private data = {
  //   options: JSON.stringify(this.options),
  //   filename: 'test.png',
  //   type: 'image/png',
  // };


  convertChartToImg(chart) {
    var _this = this;

    return (0,C_Users_diana_Documents_projects_highcharts_core_frontend_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      var data = {
        options: JSON.stringify(chart),
        filename: 'test.png',
        type: 'image/png',
        callback: 'C:\Users\diana\Documents\Hardskills-V2.14.2.5\Hardskills Admin Utility V2.14.2.5\Personal Report Data\resources\grouped-categories.js'
      }; // Prepare POST data

      const body = new FormData();
      body.append('infile', data.options); // body.append('width', 550);
      // Post it to the export server

      const blob = yield fetch('https://export.highcharts.com/', {
        body,
        method: 'post'
      }).then(result => result.blob()); // Create the image

      const img = new Image();
      img.src = yield _this.blob2base64(blob);
      _this.htmlToAdd = img.src;
      console.log(data.options); // document.getElementById('container4').appendChild(img);
    })();
  }

  getRandomList(min, max, length) {
    const data = [];

    for (let i = 0; i < length; i++) {
      data.push(Math.floor(Math.random() * (max - min + 1) + min));
    }

    return data;
  }

  generateSeries(len = 10) {
    this.values = this.getRandomList(30, 100, len);
    var color = '#74c26e';
    var data = [];
    var num = 0;

    for (let value of this.values) {
      if (value < 40) {
        color = '#f2ce72';
      } else if (75 > value && value > 40) {
        color = '#b7e08b';
      } else {
        color = '#74c26e';
      }

      data.push({
        // x: this.values.indexOf(value),
        x: num,
        y: value,
        color: color,
        name: "Colaboration & Teamwork"
      });
      num += 1;
    }

    return data;
  }

  personalChart2() {
    var chart = highcharts__WEBPACK_IMPORTED_MODULE_1__.chart('chart2', {
      chart: {
        type: 'column',
        // width: 800,
        height: 550
      },
      title: {
        text: 'chart2'
      },
      xAxis: [{
        categories: ['Self-Awareness', 'Communication', 'Effective Meetings', 'Self-Awareness', 'How to Say No', 'Effective Meetings', 'Self-Awareness', 'Collaboration & Teamwork', 'Effective Meetings', 'Effective Meetings'],
        alternateGridColor: '#fff2e8',
        labels: {
          y: 42,
          style: {
            fontSize: 11,
            color: 'grey',
            width: '80px'
          },
          overflow: "allow"
        },
        offset: 0
      }, {
        categories: ['Pre | Post', 'Pre | Post', 'Pre  Post', 'Pre  Post', 'Pre  Post', 'Pre  Post', 'Pre  Post', 'Pre  Post', 'Pre  Post', 'Pre  Post'],
        linkedTo: 0,
        opposite: false,
        labels: {
          style: {
            fontSize: 11,
            color: 'grey'
          }
        },
        offset: 0
      }],
      yAxis: {
        // allowDecimals: false,
        min: 0,
        max: 5,
        title: {
          text: ''
        },
        tickInterval: 1
      },
      legend: {
        enabled: false
      },
      credits: {
        enabled: false
      },
      plotOptions: {
        column: {
          stacking: 'normal'
        },
        series: {
          pointPadding: 0.2
        }
      },
      series: [{
        name: 'Gap to goal',
        data: this.getRandomList(1, 1, 10),
        stack: 'male',
        color: '#e3bc49'
      }, {
        name: 'Current Rating',
        data: this.getRandomList(2, 4, 10),
        stack: 'male',
        color: '#bab9b6'
      }, {
        name: 'Gap to goal',
        data: this.getRandomList(1, 2, 10),
        stack: 'female',
        color: '#e3bc49'
      }, {
        name: 'Increase in Rating',
        data: this.getRandomList(2, 4, 10),
        stack: 'female',
        color: '#7cba73'
      }]
    });
    this.convertChartToImg(chart);
  }

  getBulletGraph() {
    highcharts_modules_bullet__WEBPACK_IMPORTED_MODULE_2___default()(highcharts__WEBPACK_IMPORTED_MODULE_1__);
    var chart = highcharts__WEBPACK_IMPORTED_MODULE_1__.chart('bullet-graph1', {
      chart: {
        height: 93,
        width: 410,
        inverted: true,
        marginLeft: 135,
        type: 'bullet',
        marginTop: 40,
        innerHeight: 10
      },
      title: {
        text: null
      },
      xAxis: {
        categories: ['']
      },
      yAxis: {
        min: 0,
        max: 100,
        tickInterval: 0,
        gridLineWidth: 0,
        plotBands: [{
          from: 0,
          to: 40,
          color: '#f09b46'
        }, {
          from: 40,
          to: 75,
          color: '#b7e08b'
        }, {
          from: 75,
          to: 100,
          color: '#74c26e'
        }],
        title: null,
        labels: {
          format: "{value}%",
          overflow: 'justify'
        }
      },
      legend: {
        enabled: false
      },
      plotOptions: {
        series: {
          pointPadding: 0.25,
          borderWidth: 0,
          color: '#000',
          targetOptions: {
            width: '200%'
          }
        }
      },
      credits: {
        enabled: false
      },
      exporting: {
        enabled: false
      },
      series: [{
        data: [{
          y: this.y,
          target: this.target
        }]
      }],
      tooltip: {
        pointFormat: '<b>{point.y}</b> (with target at {point.target})'
      }
    }); // this.convertChartToImg(chart.options)
    // console.log(chart.options)
  }

  getNegativeStackBar2() {
    var sub_categories = ['TEST', 'What is communication, why its important', 'What is professionalism and how does it connect to high performance', 'How to communicate', 'What is professionalism and how does it connect to high performance', 'Why is self-awareness critical for every professional', 'What is communication, why its important', 'What is professionalism and how does it connect to high performance', 'How to communicate', 'What is professionalism and how does it connect to high performance', 'Why is self-awareness critical for every professional', 'What is communication, why its important', 'What is professionalism and how does it connect to high performance', 'How to communicate', 'What is professionalism and how does it connect to high performance', 'Why is self-awareness critical for every professional', 'What is communication, why its important', 'What is professionalism and how does it connect to high performance', 'How to communicate', 'What is professionalism and how does it connect to high performance', 'Why is self-awareness critical for every professional', 'What is communication, why its important', 'What is professionalism and how does it connect to high performance', 'How to communicate', 'What is professionalism and how does it connect to high performance', 'Why is self-awareness critical for every professional', 'What is communication, why its important', 'What is professionalism and how does it connect to high performance', 'How to communicate', 'What is professionalism and how does it connect to high performance', 'Why is self-awareness critical for every professional'];
    var categories = [0, 1, 2, 'test', '', '', 'How to Sell', '', '', 'Effective Meetings', '', '', 'Professionalism', '', '', 'Question+X', '', '', 'How to Sell', '', '', 'How to Sell', '', '', 'Effective Meetings', '', '', 'Professionalism', '', '', 'How to Sell', '', '', 'Question+X', '', ''];
    var chart = new highcharts__WEBPACK_IMPORTED_MODULE_1__.Chart({
      chart: {
        renderTo: 'negative-stack2',
        height: 1200,
        style: {
          fontFamily: 'Arial'
        },
        plotBackgroundColor: this.isEven ? '#EAEAEA' : 'white',
        zoomType: "xy",
        marginLeft: 450,
        type: "column",
        inverted: true,
        marginTop: -40
      },
      title: {
        text: null
      },
      xAxis: [{
        categories: sub_categories,
        labels: {
          align: "right",
          x: -20,
          padding: 80,
          y: 3,
          style: {
            fontSize: 13,
            color: 'grey'
          }
        } // offset: 150,

      }, {
        categories: categories,
        tickInterval: 3,
        alternateGridColor: this.isEven ? 'white' : '#EAEAEA',
        linkedTo: 0,
        opposite: false,
        labels: {
          x: -310,
          padding: 0.0,
          y: -35,
          align: 'center',
          style: {
            fontSize: 14,
            fontWeight: 'bold'
          }
        },
        offset: 0
      }],
      yAxis: {
        min: 0,
        max: 100,
        labels: {
          format: "{value}%",
          overflow: 'justify'
        }
      },
      plotOptions: {
        series: {
          pointWidth: 19,
          shadow: false,
          minPointLength: 14,
          borderWidth: 0
        },
        column: {
          stacking: 'normal'
        }
      },
      legend: {
        enabled: false
      },
      credits: {
        enabled: false
      },
      series: [{
        data: this.generateSeries(30)
      }, {
        data: this.getRandomList(65, 80, 30),
        type: 'spline',
        color: '#c9c5b7'
      }]
    });
  }

  getPersonalScore3() {
    var data = this.getRandomList(65, 80, 10);
    var chart = highcharts__WEBPACK_IMPORTED_MODULE_1__.chart('box3', {
      chart: {
        type: 'column',
        height: 600
      },
      title: {
        text: 'getPersonalScore3'
      },
      accessibility: {
        announceNewData: {
          enabled: true
        }
      },
      xAxis: [{
        categories: data,
        labels: {
          format: '{value}%',
          y: -5,
          style: {
            fontSize: 12,
            fontWeight: 'bold',
            color: 'black'
          },
          overflow: "allow"
        },
        offset: 0
      }, {
        categories: ['Self-Awareness', 'Communication', 'Effective Meetings', 'Self-Awareness', 'How to Say No', 'Effective Meetings', 'Self-Awareness', 'Collaboration & Teamwork', 'Effective Meetings', 'Effective Meetings'],
        linkedTo: 0,
        opposite: false,
        labels: {
          style: {
            fontSize: 11,
            color: 'grey'
          }
        },
        offset: 0
      }],
      yAxis: {
        min: 0,
        max: 100,
        tickInterval: 10,
        title: {
          text: 'Percent ( % )'
        }
      },
      legend: {
        enabled: false
      },
      credits: {
        enabled: false
      },
      tooltip: {
        headerFormat: '<span style="font-size:11px">{series.name}</span><br>',
        pointFormat: '<span style="color:{point.color}">{point.name}</span>: <b>{point.y:.2f}%</b> of total<br/>'
      },
      series: [{
        name: "Name",
        colorByPoint: true,
        data: this.generateSeries()
      }, {
        data: data,
        type: 'spline',
        color: '#c9c5b7'
      }]
    });
    this.convertChartToImg(chart.options);
    console.log(chart.options);
  }

  ngOnInit() {
    this.getBulletGraph();
    this.getNegativeStackBar2();
    this.personalChart2();
    this.getPersonalScore3();
    this.personalReportDataService.getTasks().subscribe(learner => this.learner = learner);
  }

}

PersonalReportComponent.ɵfac = function PersonalReportComponent_Factory(t) {
  return new (t || PersonalReportComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵdirectiveInject"](_servises_personal_report_data_service__WEBPACK_IMPORTED_MODULE_3__.PersonalReportDataService));
};

PersonalReportComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵdefineComponent"]({
  type: PersonalReportComponent,
  selectors: [["app-personal-report"]],
  decls: 33,
  vars: 6,
  consts: [[1, "charts"], [1, "bullet-block", "my-8"], [1, "flex", "user-score", 3, "ngStyle"], [1, ""], [1, "arrow-down"], [1, "flex", "cohort-av", 3, "ngStyle"], [1, "cohort-av"], [1, "arrow-up"], ["id", "bullet-graph1"], [1, "legend", "flex"], [1, "dot"], [1, "flex"], [1, "line"], [1, "my-8"], ["id", "chart2", 1, "my-8"], ["id", "box3", 1, "my-8"], ["id", "negative-stack2", 1, "my-8"]],
  template: function PersonalReportComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementStart"](0, "div", 0)(1, "div", 1)(2, "div", 2)(3, "p", 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵtext"](4, "Your score");
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelement"](5, "i", 4);
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementStart"](6, "div", 5)(7, "p", 6);
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵtext"](8, "Cohort Avarage");
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelement"](9, "i", 7);
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelement"](10, "div", 8);
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementStart"](11, "div", 9)(12, "p");
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelement"](13, "span", 10);
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵtext"](14, "Above 75%");
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementStart"](15, "p");
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelement"](16, "span", 10);
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵtext"](17, "Above 40%");
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementStart"](18, "p");
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelement"](19, "span", 10);
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵtext"](20, "Below 40%");
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementStart"](21, "div", 11);
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelement"](22, "span", 12)(23, "span", 10);
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementStart"](24, "p");
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵtext"](25, "Cohort Average");
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementEnd"]()();
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementStart"](26, "p", 13);
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵtext"](27, "Lorem, ipsum dolor sit amet consectetur adipisicing elit. Ea labore recusandae, nihil earum, dolore ullam, odit perferendis porro ad minus veritatis expedita? Ipsum adipisci voluptas ex blanditiis ullam a error? Nisi voluptatum dolorum rem, placeat neque sequi rovident tenetur iure praesentium quibusdam");
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelement"](28, "div", 14)(29, "div", 15);
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementStart"](30, "p", 13);
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵtext"](31, " accusantium repellat atque soluta? Exercitationem rerum, fuga at fugiat maiores nulla rem delectus fugit. In obcaecati iste hic quia modi ducimus! Saepe ea quisquam et fugit nulla. Quo, animi voluptate. Dignissimos aperiam libero quae perferendis unde ea facilis commodi cum! Quia quod incidunt tempore nulla quae! Error omnis quos dolores molestiae, nam obcaecati aliquid ad quod nulla, eos quae sunt? Quasi sint recusandae non fugit. Modi error beatae doloremque neque pariatur placeat ratione, facilis tempora molestiae reprehenderit nihil dolores odio, perspiciatis, numquam odit excepturi aliquid illum fugiat voluptates. Doloribus, blanditiis. Iste, aperiam laudantium voluptas, sapiente reprehenderit illum tempora sequi deleniti, aut");
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelement"](32, "div", 16);
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵelementEnd"]();
    }

    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵproperty"]("ngStyle", _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵpureFunction1"](2, _c0, 105 + ctx.y * 2.65 + "px"));
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵadvance"](4);
      _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵproperty"]("ngStyle", _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵpureFunction1"](4, _c0, 85 + ctx.target * 2.65 + "px"));
    }
  },
  directives: [_angular_common__WEBPACK_IMPORTED_MODULE_6__.NgStyle],
  styles: [".charts[_ngcontent-%COMP%] {\n  width: 900px;\n  margin: auto;\n}\n\n.flex[_ngcontent-%COMP%] {\n  display: flex;\n}\n\n.user-score[_ngcontent-%COMP%], .cohort-av[_ngcontent-%COMP%] {\n  font-weight: bold;\n  font-size: 12px;\n  Z-Index: 1;\n}\n\n.user-score[_ngcontent-%COMP%] {\n  margin-left: 370px;\n  position: relative;\n  top: 60px;\n}\n\n.cohort-av[_ngcontent-%COMP%] {\n  position: relative;\n  top: 45px;\n  color: grey;\n}\n\n.arrow-down[_ngcontent-%COMP%], .arrow-up[_ngcontent-%COMP%] {\n  width: 0;\n  height: 0;\n  border-left: 6px solid transparent;\n  border-right: 6px solid transparent;\n  Z-Index: 1;\n  position: relative;\n}\n\n.arrow-up[_ngcontent-%COMP%] {\n  border-bottom: 13px solid grey;\n  top: 30px;\n  margin-left: -45px;\n}\n\n.arrow-down[_ngcontent-%COMP%] {\n  border-top: 13px solid #000;\n  margin-top: 18px;\n  margin-left: -35px;\n}\n\n.dot[_ngcontent-%COMP%] {\n  height: 12px;\n  width: 12px;\n  background-color: #bbb;\n  border-radius: 50%;\n  display: inline-block;\n}\n\n.line[_ngcontent-%COMP%] {\n  width: 20px;\n  border-bottom: 3px solid grey;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBlcnNvbmFsLXJlcG9ydC5jb21wb25lbnQuc2FzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLFlBQUE7RUFDQSxZQUFBO0FBQ0Y7O0FBQ0E7RUFDRSxhQUFBO0FBRUY7O0FBRUE7RUFDRSxpQkFBQTtFQUNBLGVBQUE7RUFDQSxVQUFBO0FBQ0Y7O0FBRUE7RUFDRSxrQkFBQTtFQUNBLGtCQUFBO0VBQ0EsU0FBQTtBQUNGOztBQUNBO0VBQ0Usa0JBQUE7RUFDQSxTQUFBO0VBQ0EsV0FBQTtBQUVGOztBQUVBO0VBQ0UsUUFBQTtFQUNBLFNBQUE7RUFDQSxrQ0FBQTtFQUNBLG1DQUFBO0VBQ0EsVUFBQTtFQUNBLGtCQUFBO0FBQ0Y7O0FBQ0E7RUFDRSw4QkFBQTtFQUNBLFNBQUE7RUFDQSxrQkFBQTtBQUVGOztBQUFBO0VBQ0UsMkJBQUE7RUFDQSxnQkFBQTtFQUNBLGtCQUFBO0FBR0Y7O0FBQUE7RUFDRSxZQUFBO0VBQ0EsV0FBQTtFQUNBLHNCQUFBO0VBQ0Esa0JBQUE7RUFDQSxxQkFBQTtBQUdGOztBQURBO0VBQ0UsV0FBQTtFQUNBLDZCQUFBO0FBSUYiLCJmaWxlIjoicGVyc29uYWwtcmVwb3J0LmNvbXBvbmVudC5zYXNzIiwic291cmNlc0NvbnRlbnQiOlsiLmNoYXJ0c1xyXG4gIHdpZHRoOjkwMHB4XHJcbiAgbWFyZ2luOiBhdXRvXHJcblxyXG4uZmxleFxyXG4gIGRpc3BsYXk6IGZsZXhcclxuXHJcblxyXG5cclxuLnVzZXItc2NvcmUsIC5jb2hvcnQtYXZcclxuICBmb250LXdlaWdodDogYm9sZFxyXG4gIGZvbnQtc2l6ZTogMTJweFxyXG4gIFotSW5kZXg6IDFcclxuXHJcblxyXG4udXNlci1zY29yZVxyXG4gIG1hcmdpbi1sZWZ0OiAzNzBweCAgICAgIC8vMzcwID09PSAxMDAlICAgIDEwNVBYID09PTElXHJcbiAgcG9zaXRpb246IHJlbGF0aXZlXHJcbiAgdG9wOiA2MHB4XHJcblxyXG4uY29ob3J0LWF2XHJcbiAgcG9zaXRpb246IHJlbGF0aXZlXHJcbiAgdG9wOiA0NXB4XHJcbiAgY29sb3I6IGdyZXlcclxuXHJcblxyXG5cclxuLmFycm93LWRvd24sIC5hcnJvdy11cFxyXG4gIHdpZHRoOiAwXHJcbiAgaGVpZ2h0OiAwXHJcbiAgYm9yZGVyLWxlZnQ6IDZweCBzb2xpZCB0cmFuc3BhcmVudFxyXG4gIGJvcmRlci1yaWdodDogNnB4IHNvbGlkIHRyYW5zcGFyZW50XHJcbiAgWi1JbmRleDogMVxyXG4gIHBvc2l0aW9uOiByZWxhdGl2ZVxyXG5cclxuLmFycm93LXVwXHJcbiAgYm9yZGVyLWJvdHRvbTogMTNweCBzb2xpZCBncmV5XHJcbiAgdG9wOiAzMHB4XHJcbiAgbWFyZ2luLWxlZnQ6IC00NXB4XHJcblxyXG4uYXJyb3ctZG93blxyXG4gIGJvcmRlci10b3A6IDEzcHggc29saWQgIzAwMFxyXG4gIG1hcmdpbi10b3A6IDE4cHhcclxuICBtYXJnaW4tbGVmdDogLTM1cHhcclxuXHJcblxyXG4uZG90XHJcbiAgaGVpZ2h0OiAxMnB4XHJcbiAgd2lkdGg6IDEycHhcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjYmJiXHJcbiAgYm9yZGVyLXJhZGl1czogNTAlXHJcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrXHJcblxyXG4ubGluZVxyXG4gIHdpZHRoOiAyMHB4XHJcbiAgYm9yZGVyLWJvdHRvbTogM3B4IHNvbGlkIGdyZXlcclxuIl19 */"]
});

/***/ }),

/***/ 3959:
/*!***************************************************************************!*\
  !*** ./src/app/components/report-from-java/report-from-java.component.ts ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ReportFromJavaComponent": () => (/* binding */ ReportFromJavaComponent)
/* harmony export */ });
/* harmony import */ var C_Users_diana_Documents_projects_highcharts_core_frontend_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 1670);
/* harmony import */ var highcharts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! highcharts */ 5972);
/* harmony import */ var highcharts__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(highcharts__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ 3184);



class ReportFromJavaComponent {
  constructor() {
    this.blob2base64 = blob => new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onerror = reject;

      reader.onload = () => resolve(reader.result);

      reader.readAsDataURL(blob);
    });
  }

  convertChartToImg(chart) {
    var _this = this;

    return (0,C_Users_diana_Documents_projects_highcharts_core_frontend_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      var data = {
        options: JSON.stringify(chart),
        filename: 'test.png',
        type: 'image/png'
      }; // Prepare POST data

      const body = new FormData();
      body.append('infile', data.options); // body.append('width', 550);
      // Post it to the export server

      const blob = yield fetch('https://export.highcharts.com/', {
        body,
        method: 'post'
      }).then(result => result.blob()); // Create the image

      const img = new Image();
      img.src = yield _this.blob2base64(blob);
      _this.htmlToAdd = img.src;
      console.log(data.options); // document.getElementById('container4').appendChild(img);
    })();
  }

  getRandomList(min, max, length) {
    const data = [];

    for (let i = 0; i < length; i++) {
      data.push(Math.floor(Math.random() * (max - min + 1) + min));
    }

    return data;
  }

  generateSeries(len = 10) {
    this.values = this.getRandomList(30, 100, len);
    var color = '#74c26e';
    var data = [];
    var num = 0;

    for (let value of this.values) {
      if (value < 40) {
        color = '#f2ce72';
      } else if (75 > value && value > 40) {
        color = '#b7e08b';
      } else {
        color = '#74c26e';
      }

      data.push({
        // x: this.values.indexOf(value),
        x: num,
        y: value,
        color: color,
        name: "Colaboration & Teamwork"
      });
      num += 1;
    }

    return data;
  }

  personalChart1() {
    var chart = highcharts__WEBPACK_IMPORTED_MODULE_1__.chart('chart1', {
      chart: {
        type: 'column'
      },
      title: {
        text: ''
      },
      xAxis: {
        categories: ["Self-<br>Awareness", "Communication", "Time<br>Management", "How to Sell", "How to Say<br>No", "Effective<br>Meetings", "Critical<br>Thinking", "Planning<br>& Agility", "Professionalism", "Collaboration<br>& Teamwork"],
        labels: {
          style: {
            fontFamily: 'Arial',
            color: '#787878',
            fontSize: '20px',
            textOverflow: 'none'
          }
        },
        tickWidth: 0,
        lineWidth: 0
      },
      yAxis: {
        min: 0,
        max: 100,
        title: {
          text: 'Percent (%)',
          style: {
            fontFamily: 'Arial',
            fontSize: '24px',
            color: '#787878'
          }
        },
        labels: {
          style: {
            fontFamily: 'Arial',
            fontSize: '24px',
            color: '#787878'
          }
        },
        tickWidth: 0,
        gridLineColor: '#e7e6e6'
      },
      credits: false,
      plotOptions: {
        series: {
          grouping: false,
          lineWidth: 4,
          marker: {
            radius: 7
          }
        },
        column: {
          zones: [{
            value: 40,
            color: '#f08c4a'
          }, {
            value: 75,
            color: '#92d050'
          }, {
            color: '#00b050'
          }],
          dataLabels: {
            enabled: true,
            inside: true,
            verticalAlign: 'bottom',
            style: {
              fontFamily: 'Arial',
              fontSize: '24px',
              textOutline: false,
              color: 'black',
              fontWeight: 'notBold'
            },
            format: "{y}%"
          }
        }
      },
      legend: {
        symbolHeight: 20,
        symbolWidth: 20,
        itemStyle: {
          fontFamily: 'Arial',
          fontSize: '24px',
          color: '#787878',
          fontWeight: 'asd'
        }
      },
      series: [{
        type: 'column',
        name: 'Above 75%',
        data: this.getRandomList(40, 100, 10),
        color: '#00b050'
      }, {
        type: 'column',
        name: 'Above 40%',
        data: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        color: '#92d050'
      }, {
        type: 'column',
        name: 'Below 40%',
        color: '#f08c4a'
      }, {
        type: 'spline',
        name: 'Cohort Average',
        data: this.getRandomList(40, 100, 10),
        color: '#cccccc'
      }],
      exporting: {
        sourceWidth: 1430,
        sourceHeight: 880,
        scale: 1,
        enabled: false
      }
    });
    this.convertChartToImg(chart.options);
  }

  personalChart2() {
    var chart = highcharts__WEBPACK_IMPORTED_MODULE_1__.chart('chart2', {
      chart: {
        type: 'bar' // "events":{
        // 	"load": function() {
        // 		var plotBands = this.xAxis[0].plotLinesAndBands;
        // 		for (var i in plotBands) {
        // 			var d = plotBands[i].svgElem.d;
        // 			var dArray = d.split(' ');
        // 			var rect = {x: 25, y: dArray[5], width: 700, height: 105};
        // 			if (i % 2 != 0) {
        // 				this.renderer.rect(rect.x, rect.y, rect.width, rect.height).attr({fill: '#FFF8E4'}).add();
        // 			}
        // 		}
        // 	}
        // }

      },
      title: {
        text: ''
      },
      xAxis: {
        categories: [{
          name: "<b>Self-Awareness</b>",
          categories: ["Why self-awareness is critical to<br/>every professional", "How to be more self-aware", "Why a global awareness is so important"]
        }, {
          name: "<b>Communication</b>",
          categories: ["What is communication, why it's important", "How to communicate", "Effective written communcation"]
        }, {
          name: "<b>Time</b><br/><b>Management</b>",
          categories: ["Awareness of time management, why it's necessary", "Understanding prioritization", "How to manage interruptions"]
        }, {
          name: "<b>How to Sell</b>",
          categories: ["What is sales and how to sell", "The sales process, and why all team<br/>members need to understand it", "How to close sales and deal with objections"]
        }, {
          name: "<b>How to say no</b>",
          categories: ["Why it's important to be able to say no", "How to say no", "What saying no means for a professional"]
        }, {
          name: "<b>Effective</b><br/><b>Meetings</b>",
          categories: ["Why meetings go wrong", "Rules of engagement during meetings", "How to prepare for a meeting and<br/>follow-up after one"]
        }, {
          name: "<b>Critical Thinking</b>",
          categories: ["Why critical thinking is important", "How to apply critical thinking", "Situational awareness and applying<br/>critical thinking in real time"]
        }, {
          name: "<b>Planning &</b><br/><b>Agility</b>",
          categories: ["Why planning and agility are important", "Understanding plans are nothing,<br/>planning is everything & how to plan", "How to implement agility in an organization"]
        }, {
          name: "<b>Professionalism</b>",
          categories: ["What is professionalism", "Understanding and applying attention<br/>to detail and ownership", "Understanding and applying initiative"]
        }, {
          name: "<b>Collaboration &</b><br/><b>Teamwork</b>",
          categories: ["What is collaboration and teamwork<br/>& what makes a good team player", "How to be a collaborative team member", "Understanding affinity bias and<br/>the importance of inclusion"]
        }],
        labels: {
          rotation: 0,
          style: {
            fontFamily: 'Arial',
            fontSize: '14px',
            overflow: 'justify',
            textOverflow: 'none'
          }
        },
        "plotBands": [{
          "color": "#ffffff",
          "from": -1,
          "to": 2.5
        }, {
          "color": "#FFF8E4",
          "from": 2.5,
          "to": 5.5
        }, {
          "color": "#ffffff",
          "from": 5.5,
          "to": 8.5
        }, {
          "color": "#FFF8E4",
          "from": 8.5,
          "to": 11.5
        }, {
          "color": "#ffffff",
          "from": 11.5,
          "to": 14.5
        }, {
          "color": "#FFF8E4",
          "from": 14.5,
          "to": 17.5
        }, {
          "color": "#ffffff",
          "from": 17.5,
          "to": 20.5
        }, {
          "color": "#FFF8E4",
          "from": 20.5,
          "to": 23.5
        }, {
          "color": "#ffffff",
          "from": 23.5,
          "to": 26.5
        }, {
          "color": "#FFF8E4",
          "from": 26.5,
          "to": 29.5
        }]
      },
      yAxis: {
        min: 0,
        max: 100,
        title: {
          text: 'Percent (%)',
          style: {
            fontFamily: 'Arial',
            fontSize: '14px'
          }
        },
        labels: {
          style: {
            fontFamily: 'Arial',
            fontSize: '14px'
          }
        }
      },
      credits: false,
      plotOptions: {
        series: {
          borderWidth: 0,
          stacking: 'normal'
        },
        bar: {
          zones: [{
            value: 40,
            color: '#f08c4a'
          }, {
            value: 75,
            color: '#92d050'
          }, {
            color: '#00b050'
          }]
        }
      },
      legend: {
        symbolHeight: 16,
        symbolWidth: 16,
        itemStyle: {
          fontFamily: 'Arial',
          fontSize: '16px',
          color: '#787878',
          fontWeight: 'asd'
        }
      },
      series: [{
        type: 'bar',
        name: 'Above 75%',
        data: this.getRandomList(60, 100, 30),
        color: '#00b050'
      }, {
        id: '1',
        type: 'bar',
        name: 'Above 40%',
        data: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        color: '#92d050'
      }, {
        type: 'column',
        idOfLinkedSeries: '1',
        name: 'Below 40%',
        color: '#f08c4a'
      }, {
        type: 'spline',
        name: 'Cohort Average',
        data: this.getRandomList(60, 100, 30),
        color: '#cccccc'
      }],
      exporting: {
        sourceWidth: 934,
        sourceHeight: 1160,
        scale: 1,
        enabled: false
      }
    });
  }

  personalChart3() {
    var chart = highcharts__WEBPACK_IMPORTED_MODULE_1__.chart('chart3', {
      chart: {
        type: 'column' // "events":{
        // 	"load": function() {
        //     var plotBands = this.xAxis[0].plotLinesAndBands;
        //     for (var i in plotBands) {
        //       var d = plotBands[i].svgElem.d;
        //       var dArray = d.split(' ');
        //       var rect = {x: dArray[1], y: dArray[5], width: 100.5, height: 80};
        //       if (i % 2 != 0) {
        //         this.renderer.rect(rect.x, rect.y, rect.width, rect.height).attr({fill: '#FFF8E4'}).add();
        //       }
        //     }
        //   }
        // }

      },
      title: {
        text: ''
      },
      xAxis: {
        categories: [{
          name: "Self-<br/>Awareness",
          categories: ["Pre", "Post"]
        }, {
          name: "Communication",
          categories: ["Pre", "Post"]
        }, {
          name: "Time<br/>Management",
          categories: ["Pre", "Post"]
        }, {
          name: "How to Sell",
          categories: ["Pre", "Post"]
        }, {
          name: "How to Say<br/>No",
          categories: ["Pre", "Post"]
        }, {
          name: "Effective<br/>Meetings",
          categories: ["Pre", "Post"]
        }, {
          name: "Critical<br/>Thinking",
          categories: ["Pre", "Post"]
        }, {
          name: "Planning<br/>& Agility",
          categories: ["Pre", "Post"]
        }, {
          name: "Professionalism",
          categories: ["Pre", "Post"]
        }, {
          name: "Collaboration<br/>& Teamwork",
          categories: ["Pre", "Post"]
        }],
        labels: {
          rotation: 0,
          style: {
            fontFamily: 'Arial',
            color: '#787878',
            fontSize: '14px',
            textOverflow: 'none'
          }
        },
        lineWidth: 0,
        "plotBands": [{
          "color": "#ffffff",
          "from": -0.5,
          "to": 1.5
        }, {
          "color": "#FFF8E4",
          "from": 1.5,
          "to": 3.5
        }, {
          "color": "#ffffff",
          "from": 3.5,
          "to": 5.5
        }, {
          "color": "#FFF8E4",
          "from": 5.5,
          "to": 7.5
        }, {
          "color": "#ffffff",
          "from": 7.5,
          "to": 9.5
        }, {
          "color": "#FFF8E4",
          "from": 9.5,
          "to": 11.5
        }, {
          "color": "#ffffff",
          "from": 11.5,
          "to": 13.5
        }, {
          "color": "#FFF8E4",
          "from": 13.5,
          "to": 15.5
        }, {
          "color": "#ffffff",
          "from": 15.5,
          "to": 17.5
        }, {
          "color": "#FFF8E4",
          "from": 17.5,
          "to": 19.5
        }]
      },
      yAxis: {
        min: 0,
        max: 5,
        title: {
          text: ''
        },
        labels: {
          style: {
            fontFamily: 'Arial',
            color: '#787878',
            fontSize: '14px',
            textOverflow: 'none'
          }
        },
        allowDecimals: false,
        gridLineColor: '#e7e6e6'
      },
      credits: false,
      plotOptions: {
        series: {
          stacking: 'normal',
          borderWidth: 0
        }
      },
      legend: {
        symbolHeight: 16,
        symbolWidth: 16,
        itemStyle: {
          fontFamily: 'Arial',
          fontSize: '16px',
          color: '#787878',
          fontWeight: 'asd'
        },
        reversed: true
      },
      series: [{
        type: 'column',
        name: 'Gap to Goal',
        data: this.getRandomList(1, 2, 20),
        color: '#edc17c'
      }, {
        type: 'column',
        name: 'Increase in Self Rating',
        data: this.getRandomList(3, 4, 20),
        color: '#00b050'
      }, {
        type: 'column',
        name: 'Drop in Self Rating',
        data: this.getRandomList(1, 2, 20),
        color: '#92d050'
      }, {
        id: '1',
        type: 'column',
        name: 'Current Rating',
        data: this.getRandomList(3, 4, 20),
        color: '#cccccc'
      }],
      exporting: {
        sourceWidth: 1060,
        sourceHeight: 720,
        scale: 1,
        enabled: false
      }
    });
  }

  personalChart1_7() {
    var chart = highcharts__WEBPACK_IMPORTED_MODULE_1__.chart('chart1_7', {
      chart: {
        type: 'column'
      },
      title: {
        text: ''
      },
      xAxis: {
        categories: ["Self-<br>Awareness", "Communication", "Time<br>Management", "How to Sell", "How to Say<br>No", "Effective<br>Meetings", "Critical<br>Thinking"],
        labels: {
          style: {
            fontFamily: 'Arial',
            color: '#787878',
            fontSize: '24px',
            textOverflow: 'none'
          }
        },
        tickWidth: 0,
        lineWidth: 0
      },
      yAxis: {
        min: 0,
        max: 100,
        title: {
          text: 'Percent (%)',
          style: {
            fontFamily: 'Arial',
            fontSize: '24px',
            color: '#787878'
          }
        },
        labels: {
          style: {
            fontFamily: 'Arial',
            fontSize: '24px',
            color: '#787878'
          }
        },
        tickWidth: 0,
        gridLineColor: '#e7e6e6'
      },
      credits: false,
      plotOptions: {
        series: {
          grouping: false,
          lineWidth: 4,
          marker: {
            radius: 7
          }
        },
        column: {
          zones: [{
            value: 39,
            color: '#f08c4a'
          }, {
            value: 75,
            color: '#92d050'
          }, {
            color: '#00b050'
          }],
          dataLabels: {
            enabled: true,
            inside: true,
            verticalAlign: 'bottom',
            style: {
              fontFamily: 'Arial',
              fontSize: '24px',
              textOutline: false,
              color: 'black',
              fontWeight: 'notBold'
            },
            format: "{y}%" // formatter:function(): any {
            //     return "{y}%";
            // }

          }
        }
      },
      legend: {
        symbolHeight: 24,
        symbolWidth: 24,
        itemStyle: {
          fontFamily: 'Arial',
          fontSize: '28px',
          color: '#787878',
          fontWeight: 'asd'
        }
      },
      series: [{
        type: 'column',
        name: 'Above 75%',
        data: this.getRandomList(40, 100, 7),
        color: '#00b050'
      }, {
        type: 'column',
        name: 'Above 40%',
        data: [0, 0, 0, 0, 0, 0, 0],
        color: '#92d050'
      }, {
        type: 'column',
        name: 'Below 40%',
        color: '#f08c4a'
      }, {
        type: 'spline',
        name: 'Cohort Average',
        data: this.getRandomList(40, 100, 7),
        color: '#cccccc'
      }],
      exporting: {
        sourceWidth: 1430,
        sourceHeight: 880,
        scale: 1,
        enabled: false
      }
    });
  }

  personalChart2_7() {
    var chart = highcharts__WEBPACK_IMPORTED_MODULE_1__.chart('chart2_7', {
      chart: {
        type: 'bar' // "events":{
        //   "load": function() {
        //     var plotBands = this.xAxis[0].plotLinesAndBands;
        //     for (var i in plotBands) {
        //       var d = plotBands[i].svgElem.d;
        //       var dArray = d.split(' ');
        //       var rect = {x: 25, y: dArray[5], width: 700, height: 139};
        //       if (i % 2 != 0) {
        //         this.renderer.rect(rect.x, rect.y, rect.width, rect.height).attr({fill: '#FFF8E4'}).add();
        //       }
        //     }
        //   }
        // }

      },
      title: {
        text: ''
      },
      xAxis: {
        categories: [{
          name: "<b>Self-Awareness</b>",
          categories: ["Why self-awareness critical to every professional", "How to be more self-aware", "Why a global awareness is so important"]
        }, {
          name: "<b>Communication</b>",
          categories: ["What is communication, why it's important", "How to communicate", "Effective written communcation"]
        }, {
          name: "<b>Time Management</b>",
          categories: ["Awareness of time management, why it's necessary", "Understanding prioritization", "How to manage interruptions"]
        }, {
          name: "<b>How to Sell</b>",
          categories: ["What is sales and how to sell", "The sales process, and why all<br/>team members need to understand it", "How to close sales and deal with objections"]
        }, {
          name: "<b>How to say no</b>",
          categories: ["Why it's important to be able to say no", "How to say no", "What saying no means for a professional"]
        }, {
          name: "<b>Effective Meetings</b>",
          categories: ["Why meetings go wrong", "Rules of engagement during meetings", "How to prepare for a meeting and<br/>follow-up after one"]
        }, {
          name: "<b>Critical Thinking</b>",
          categories: ["Why critical thinking is important", "How to apply critical thinking", "Situational awareness and<br/>applying critical thinking in real time"]
        }],
        labels: {
          rotation: 0,
          style: {
            fontFamily: 'Arial',
            fontSize: '14px',
            overflow: 'justify',
            textOverflow: 'none'
          }
        },
        "plotBands": [{
          "color": "#ffffff",
          "from": -1,
          "to": 2.5
        }, {
          "color": "#FFF8E4",
          "from": 2.5,
          "to": 5.5
        }, {
          "color": "#ffffff",
          "from": 5.5,
          "to": 8.5
        }, {
          "color": "#FFF8E4",
          "from": 8.5,
          "to": 11.5
        }, {
          "color": "#ffffff",
          "from": 11.5,
          "to": 14.5
        }, {
          "color": "#FFF8E4",
          "from": 14.5,
          "to": 17.5
        }, {
          "color": "#ffffff",
          "from": 17.5,
          "to": 20.5
        }]
      },
      yAxis: {
        min: 0,
        max: 100,
        title: {
          text: 'Percent (%)',
          style: {
            fontFamily: 'Arial',
            fontSize: '14px'
          }
        },
        labels: {
          style: {
            fontFamily: 'Arial',
            fontSize: '14px'
          }
        }
      },
      credits: false,
      plotOptions: {
        series: {
          borderWidth: 0,
          stacking: 'normal'
        },
        bar: {
          zones: [{
            value: 39,
            color: '#f08c4a'
          }, {
            value: 75,
            color: '#92d050'
          }, {
            color: '#00b050'
          }]
        }
      },
      legend: {
        symbolHeight: 16,
        symbolWidth: 16,
        itemStyle: {
          fontFamily: 'Arial',
          fontSize: '16px',
          color: '#787878',
          fontWeight: 'asd'
        }
      },
      series: [{
        type: 'bar',
        name: 'Above 75%',
        data: this.getRandomList(60, 100, 24),
        color: '#00b050'
      }, {
        id: '1',
        type: 'bar',
        name: 'Above 40%',
        data: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        color: '#92d050'
      }, {
        type: 'column',
        idOfLinkedSeries: '1',
        name: 'Below 40%',
        color: '#f08c4a'
      }, {
        type: 'spline',
        name: 'Cohort Average',
        data: this.getRandomList(70, 100, 24),
        color: '#cccccc'
      }],
      exporting: {
        sourceWidth: 934,
        sourceHeight: 1080,
        scale: 1,
        enabled: false
      }
    });
  }

  personalChart3_7() {
    var chart = highcharts__WEBPACK_IMPORTED_MODULE_1__.chart('chart3_7', {
      chart: {
        type: 'column' // "events":{
        // 	"load": function() {
        //     var plotBands = this.xAxis[0].plotLinesAndBands;
        //     for (var i in plotBands) {
        //       var d = plotBands[i].svgElem.d;
        //       var dArray = d.split(' ');
        //       var rect = {x: dArray[1], y: dArray[5], width: 146, height: 85};
        //       if (i % 2 != 0) {
        //         this.renderer.rect(rect.x, rect.y, rect.width, rect.height).attr({fill: '#FFF8E4'}).add();
        //       }
        //     }
        //   }
        // }

      },
      title: {
        text: ''
      },
      xAxis: {
        categories: [{
          name: "Self-<br/>Awareness",
          categories: ["Pre", "Post"]
        }, {
          name: "Communication",
          categories: ["Pre", "Post"]
        }, {
          name: "Time<br/>Management",
          categories: ["Pre", "Post"]
        }, {
          name: "How to Sell",
          categories: ["Pre", "Post"]
        }, {
          name: "How to Say<br/>No",
          categories: ["Pre", "Post"]
        }, {
          name: "Effective<br/>Meetings",
          categories: ["Pre", "Post"]
        }, {
          name: "Critical<br/>Thinking",
          categories: ["Pre", "Post"]
        }],
        labels: {
          rotation: 0,
          style: {
            fontFamily: 'Arial',
            color: '#787878',
            fontSize: '16px',
            textOverflow: 'none'
          }
        },
        lineWidth: 0,
        "plotBands": [{
          "color": "#ffffff",
          "from": -0.5,
          "to": 1.5
        }, {
          "color": "#FFF8E4",
          "from": 1.5,
          "to": 3.5
        }, {
          "color": "#ffffff",
          "from": 3.5,
          "to": 5.5
        }, {
          "color": "#FFF8E4",
          "from": 5.5,
          "to": 7.5
        }, {
          "color": "#ffffff",
          "from": 7.5,
          "to": 9.5
        }, {
          "color": "#FFF8E4",
          "from": 9.5,
          "to": 11.5
        }, {
          "color": "#ffffff",
          "from": 11.5,
          "to": 13.5
        }]
      },
      yAxis: {
        min: 0,
        max: 5,
        title: {
          text: ''
        },
        labels: {
          style: {
            fontFamily: 'Arial',
            color: '#787878',
            fontSize: '16px',
            textOverflow: 'none'
          }
        },
        allowDecimals: false,
        gridLineColor: '#e7e6e6'
      },
      credits: false,
      plotOptions: {
        series: {
          stacking: 'normal',
          borderWidth: 0
        }
      },
      legend: {
        symbolHeight: 16,
        symbolWidth: 16,
        itemStyle: {
          fontFamily: 'Arial',
          fontSize: '16px',
          color: '#787878',
          fontWeight: 'asd'
        },
        reversed: true
      },
      series: [{
        type: 'column',
        name: 'Gap to Goal',
        data: this.getRandomList(1, 1, 14),
        color: '#edc17c'
      }, {
        type: 'column',
        name: 'Increase in Self Rating',
        data: this.getRandomList(2, 3, 14),
        color: '#00b050'
      }, {
        type: 'column',
        name: 'Drop in Self Rating',
        data: this.getRandomList(1, 2, 14),
        color: '#92d050'
      }, {
        id: '1',
        type: 'column',
        name: 'Current Rating',
        data: this.getRandomList(3, 4, 14),
        color: '#cccccc'
      }],
      exporting: {
        sourceWidth: 1060,
        sourceHeight: 720,
        scale: 1,
        enabled: false
      }
    });
  }

  personalChart4_7() {
    var chart = highcharts__WEBPACK_IMPORTED_MODULE_1__.chart('chart4_7', {
      chart: {
        type: 'xrange',
        width: 500,
        height: 150,
        marginLeft: 0,
        marginRight: 20
      },
      xAxis: {
        min: 0,
        max: 100,
        labels: {
          enabled: false,
          format: "{x%}"
        },
        tickInterval: 100,
        visible: false
      },
      yAxis: {
        title: {
          text: ''
        }
      },
      title: {
        text: ''
      },
      plotOptions: {
        xrange: {
          borderWidth: 0,
          grouping: false,
          dataLabels: {
            style: {
              fontSize: 16,
              fontFamily: 'Arial',
              textOutline: false,
              color: '#787878'
            }
          }
        }
      },
      legend: {
        y: 400
      },
      credits: false,
      series: [{
        name: 'series 1',
        borderRadius: 0,
        pointWidth: 30,
        data: [{
          x: 0,
          x2: 40,
          y: 0,
          color: '#f08c4a'
        }, {
          x: 40,
          x2: 75,
          y: 0,
          color: '#92d050',
          dataLabels: {
            enabled: false
          }
        }, {
          x: 75,
          x2: 100,
          y: 0,
          color: '#00b050',
          dataLabels: {
            enabled: true,
            y: 45,
            formatter: function () {
              return '';
            }
          }
        }]
      }, {
        name: 'series 2',
        borderRadius: 1,
        pointWidth: 12,
        data: [{
          x: 0,
          x2: 75,
          y: 0,
          color: 'black',
          dataLabels: {
            enabled: true,
            radius: 10,
            align: "right",
            y: -45,
            formatter: function () {
              return '';
            }
          }
        }]
      }],
      exporting: {
        sourceWidth: 500,
        sourceHeight: 150,
        scale: 1,
        enabled: false
      }
    });
    this.convertChartToImg(chart.options);
  }

  ngOnInit() {
    this.personalChart1();
    this.personalChart2();
    this.personalChart3();
    this.personalChart1_7();
    this.personalChart2_7();
    this.personalChart3_7();
    this.personalChart4_7();
  }

}

ReportFromJavaComponent.ɵfac = function ReportFromJavaComponent_Factory(t) {
  return new (t || ReportFromJavaComponent)();
};

ReportFromJavaComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdefineComponent"]({
  type: ReportFromJavaComponent,
  selectors: [["app-report-from-java"]],
  decls: 13,
  vars: 1,
  consts: [[1, "charts"], [2, "margin-bottom", "160px"], [2, "text-align", "center", "font-size", "34px", "padding-bottom", "30px"], ["alt", "", 3, "src"], ["id", "chart1"], ["id", "chart2"], ["id", "chart3"], ["id", "chart4"], ["id", "chart1_7"], ["id", "chart2_7"], ["id", "chart3_7"], ["id", "chart4_7"]],
  template: function ReportFromJavaComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementStart"](0, "div", 0)(1, "div", 1)(2, "h2", 2);
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtext"](3, "Images");
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelement"](4, "img", 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelement"](5, "div", 4)(6, "div", 5)(7, "div", 6)(8, "div", 7)(9, "div", 8)(10, "div", 9)(11, "div", 10)(12, "div", 11);
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementEnd"]();
    }

    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵadvance"](4);
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵpropertyInterpolate"]("src", ctx.htmlToAdd, _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵsanitizeUrl"]);
    }
  },
  styles: [".charts[_ngcontent-%COMP%] {\n  width: 900px;\n  margin: auto;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlcG9ydC1mcm9tLWphdmEuY29tcG9uZW50LnNhc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxZQUFBO0VBQ0EsWUFBQTtBQUNGIiwiZmlsZSI6InJlcG9ydC1mcm9tLWphdmEuY29tcG9uZW50LnNhc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuY2hhcnRzXHJcbiAgd2lkdGg6OTAwcHhcclxuICBtYXJnaW46IGF1dG9cclxuIl19 */"]
});

/***/ }),

/***/ 7884:
/*!**********************************************************!*\
  !*** ./src/app/servises/personal-report-data.service.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PersonalReportDataService": () => (/* binding */ PersonalReportDataService)
/* harmony export */ });
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/common/http */ 8784);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ 3184);



const HttpOptions = {
    headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_0__.HttpHeaders({
        'Content-Type': 'application/json',
        'X-Requested-With': 'XMLHttpRequest',
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Headers': 'Content-Type',
        'Access-Control-Allow-Methods': 'GET,POST,OPTIONS,DELETE,PUT',
    })
};
class PersonalReportDataService {
    constructor(http) {
        this.http = http;
        // private apiUrl = 'http://localhost:8000'
        // constructor(private http: HttpClient) { }
        // getPersonalReportFromCSV(): Observable<any> {
        //   return this.http.get(this.apiUrl)
        // }
        this.apiUrl = 'http://localhost:3000/learner';
    }
    getTasks() {
        return this.http.get(this.apiUrl);
    }
}
PersonalReportDataService.ɵfac = function PersonalReportDataService_Factory(t) { return new (t || PersonalReportDataService)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_common_http__WEBPACK_IMPORTED_MODULE_0__.HttpClient)); };
PersonalReportDataService.ɵprov = /*@__PURE__*/ _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({ token: PersonalReportDataService, factory: PersonalReportDataService.ɵfac, providedIn: 'root' });


/***/ }),

/***/ 2340:
/*!*****************************************!*\
  !*** ./src/environments/environment.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "environment": () => (/* binding */ environment)
/* harmony export */ });
// This file can be replaced during build by using the `fileReplacements` array.
// `ng build` replaces `environment.ts` with `environment.prod.ts`.
// The list of file replacements can be found in `angular.json`.
const environment = {
    production: false
};
/*
 * For easier debugging in development mode, you can import the following file
 * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.
 *
 * This import should be commented out in production mode because it will have a negative impact
 * on performance if an error is thrown.
 */
// import 'zone.js/plugins/zone-error';  // Included with Angular CLI.


/***/ }),

/***/ 4431:
/*!*********************!*\
  !*** ./src/main.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/platform-browser */ 318);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ 3184);
/* harmony import */ var _app_app_module__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./app/app.module */ 6747);
/* harmony import */ var _environments_environment__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./environments/environment */ 2340);




if (_environments_environment__WEBPACK_IMPORTED_MODULE_1__.environment.production) {
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.enableProdMode)();
}
_angular_platform_browser__WEBPACK_IMPORTED_MODULE_3__.platformBrowser().bootstrapModule(_app_app_module__WEBPACK_IMPORTED_MODULE_0__.AppModule)
    .catch(err => console.error(err));


/***/ })

},
/******/ __webpack_require__ => { // webpackRuntimeModules
/******/ var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
/******/ __webpack_require__.O(0, ["vendor"], () => (__webpack_exec__(8202), __webpack_exec__(4431)));
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ }
]);
//# sourceMappingURL=main.js.map